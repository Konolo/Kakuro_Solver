#[cfg(test)]
mod tests {
  use crate::puzzle_setup;
  use crate::Parents;
  use crate::Children;

  #[test]
  fn test_puzzle_setup_with_input_file_1() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "puzzles\\Kakuro_input.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    let parents = parents_and_children.0;
    let children = parents_and_children.1;

    assert_eq!(parents.len(), 48);
    assert_eq!(children.len(), 72);

    assert_eq!(parents[0], Parents { children: vec![0, 7, 15], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[1], Parents { children: vec![1, 8], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[2], Parents { children: vec![2, 9, 16, 22, 29], sum: 17, value_size: "17-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 7], vec![1, 2, 3, 5, 6]] });
    assert_eq!(parents[3], Parents { children: vec![3, 10, 18, 24, 30], sum: 17, value_size: "17-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 7], vec![1, 2, 3, 5, 6]] });
    assert_eq!(parents[4], Parents { children: vec![4, 11], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[5], Parents { children: vec![5, 12, 19], sum: 20, value_size: "20-3".to_string(), combinations: vec![vec![3, 8, 9], vec![4, 7, 9], vec![5, 6, 9], vec![5, 7, 8]] });
    assert_eq!(parents[6], Parents { children: vec![6, 14], sum: 14, value_size: "14-2".to_string(), combinations: vec![vec![5, 9], vec![6, 8]] });
    assert_eq!(parents[7], Parents { children: vec![0, 1, 2], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[8], Parents { children: vec![3, 4, 5], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[9], Parents { children: vec![13, 20], sum: 15, value_size: "15-2".to_string(), combinations: vec![vec![6, 9], vec![7, 8]] });
    assert_eq!(parents[10], Parents { children: vec![6, 7, 8, 9], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[11], Parents { children: vec![17, 23], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[12], Parents { children: vec![10, 11, 12, 13], sum: 27, value_size: "27-4".to_string(), combinations: vec![vec![3, 7, 8, 9], vec![4, 6, 8, 9], vec![5, 6, 7, 9]] });
    assert_eq!(parents[13], Parents { children: vec![14, 15], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[14], Parents { children: vec![21, 28], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[15], Parents { children: vec![16, 17, 18], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[16], Parents { children: vec![25, 31], sum: 13, value_size: "13-2".to_string(), combinations: vec![vec![4, 9], vec![5, 8], vec![6, 7]] });
    assert_eq!(parents[17], Parents { children: vec![19, 20], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[18], Parents { children: vec![26, 34, 38], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[19], Parents { children: vec![27, 35, 39], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[20], Parents { children: vec![21, 22, 23, 24, 25], sum: 18, value_size: "18-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 8], vec![1, 2, 3, 5, 7], vec![1, 2, 4, 5, 6]] });
    assert_eq!(parents[21], Parents { children: vec![32, 36, 44], sum: 14, value_size: "14-3".to_string(), combinations: vec![vec![1, 4, 9], vec![1, 5, 8], vec![1, 6, 7], vec![2, 3, 9], vec![2, 4, 8], vec![2, 5, 7], vec![3, 4, 7], vec![3, 5, 6]] });
    assert_eq!(parents[22], Parents { children: vec![33, 37, 45], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[23], Parents { children: vec![26, 27, 28, 29], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[24], Parents { children: vec![30, 31, 32, 33], sum: 21, value_size: "21-4".to_string(), combinations: vec![vec![1, 3, 8, 9], vec![1, 4, 7, 9], vec![1, 5, 6, 9], vec![1, 5, 7, 8], vec![2, 3, 7, 9], vec![2, 4, 6, 9], vec![2, 4, 7, 8], vec![2, 5, 6, 8], vec![3, 4, 5, 9], vec![3, 4, 6, 8], vec![3, 5, 6, 7]] });
    assert_eq!(parents[25], Parents { children: vec![34, 35], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[26], Parents { children: vec![40, 46], sum: 8, value_size: "8-2".to_string(), combinations: vec![vec![1, 7], vec![2, 6], vec![3, 5]] });
    assert_eq!(parents[27], Parents { children: vec![41, 47, 53, 61, 68], sum: 34, value_size: "34-5".to_string(), combinations: vec![vec![4, 6, 7, 8, 9]] });
    assert_eq!(parents[28], Parents { children: vec![42, 49, 55, 62, 69], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[29], Parents { children: vec![43, 50], sum: 5, value_size: "5-2".to_string(), combinations: vec![vec![1, 4], vec![2, 3]] });
    assert_eq!(parents[30], Parents { children: vec![36, 37], sum: 9, value_size: "9-2".to_string(), combinations: vec![vec![1, 8], vec![2, 7], vec![3, 6], vec![4, 5]] });
    assert_eq!(parents[31], Parents { children: vec![38, 39, 40, 41], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[32], Parents { children: vec![48, 54], sum: 12, value_size: "12-2".to_string(), combinations: vec![vec![3, 9], vec![4, 8], vec![5, 7]] });
    assert_eq!(parents[33], Parents { children: vec![42, 43, 44, 45], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[34], Parents { children: vec![51, 58], sum: 15, value_size: "15-2".to_string(), combinations: vec![vec![6, 9], vec![7, 8]] });
    assert_eq!(parents[35], Parents { children: vec![52, 59, 66], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[36], Parents { children: vec![46, 47, 48, 49, 50], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[37], Parents { children: vec![56, 64, 71], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[38], Parents { children: vec![57, 65], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[39], Parents { children: vec![51, 52], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[40], Parents { children: vec![60, 67], sum: 8, value_size: "8-2".to_string(), combinations: vec![vec![1, 7], vec![2, 6], vec![3, 5]] });
    assert_eq!(parents[41], Parents { children: vec![53, 54, 55], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[42], Parents { children: vec![63, 70], sum: 7, value_size: "7-2".to_string(), combinations: vec![vec![1, 6], vec![2, 5], vec![3, 4]] });
    assert_eq!(parents[43], Parents { children: vec![56, 57], sum: 6, value_size: "6-2".to_string(), combinations: vec![vec![1, 5], vec![2, 4]] });
    assert_eq!(parents[44], Parents { children: vec![58, 59, 60, 61], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[45], Parents { children: vec![62, 63, 64, 65], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[46], Parents { children: vec![66, 67, 68], sum: 13, value_size: "13-3".to_string(), combinations: vec![vec![1, 3, 9], vec![1, 4, 8], vec![1, 5, 7], vec![2, 3, 8], vec![2, 4, 7], vec![2, 5, 6], vec![3, 4, 6]] });
    assert_eq!(parents[47], Parents { children: vec![69, 70, 71], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
   
    assert_eq!(children[0], Children { parents: (0, 7), siblings: vec![1, 2, 7, 15], value: 0, possible_values: vec![1, 2, 4] }); 
    assert_eq!(children[1], Children { parents: (1, 7), siblings: vec![0, 2, 8], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[2], Children { parents: (2, 7), siblings: vec![0, 1, 9, 16, 22, 29], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[3], Children { parents: (3, 8), siblings: vec![4, 5, 10, 18, 24, 30], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[4], Children { parents: (4, 8), siblings: vec![3, 5, 11], value: 0, possible_values: vec![2, 4] });
    assert_eq!(children[5], Children { parents: (5, 8), siblings: vec![3, 4, 12, 19], value: 0, possible_values: vec![4] });
    assert_eq!(children[6], Children { parents: (6, 10), siblings: vec![7, 8, 9, 14], value: 0, possible_values: vec![5] });
    assert_eq!(children[7], Children { parents: (0, 10), siblings: vec![0, 6, 8, 9, 15], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[8], Children { parents: (1, 10), siblings: vec![1, 6, 7, 9], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[9], Children { parents: (2, 10), siblings: vec![2, 6, 7, 8, 16, 22, 29], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[10], Children { parents: (3, 12), siblings: vec![3, 11, 12, 13, 18, 24, 30], value: 0, possible_values: vec![3, 4, 5, 6, 7] });
    assert_eq!(children[11], Children { parents: (4, 12), siblings: vec![4, 10, 12, 13], value: 0, possible_values: vec![3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[12], Children { parents: (5, 12), siblings: vec![5, 10, 11, 13, 19], value: 0, possible_values: vec![3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[13], Children { parents: (9, 12), siblings: vec![10, 11, 12, 20], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[14], Children { parents: (6, 13), siblings: vec![6, 15], value: 0, possible_values: vec![9] });
    assert_eq!(children[15], Children { parents: (0, 13), siblings: vec![0, 7, 14], value: 0, possible_values: vec![7] });
    assert_eq!(children[16], Children { parents: (2, 15), siblings: vec![2, 9, 17, 18, 22, 29], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[17], Children { parents: (11, 15), siblings: vec![16, 18, 23], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[18], Children { parents: (3, 15), siblings: vec![3, 10, 16, 17, 24, 30], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[19], Children { parents: (5, 17), siblings: vec![5, 12, 20], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[20], Children { parents: (9, 17), siblings: vec![13, 19], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[21], Children { parents: (14, 20), siblings: vec![22, 23, 24, 25, 28], value: 0, possible_values: vec![8] });
    assert_eq!(children[22], Children { parents: (2, 20), siblings: vec![2, 9, 16, 21, 23, 24, 25, 29], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[23], Children { parents: (11, 20), siblings: vec![17, 21, 22, 24, 25], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[24], Children { parents: (3, 20), siblings: vec![3, 10, 18, 21, 22, 23, 25, 30], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[25], Children { parents: (16, 20), siblings: vec![21, 22, 23, 24, 31], value: 0, possible_values: vec![4, 5, 6, 7, 8] });
    assert_eq!(children[26], Children { parents: (18, 23), siblings: vec![27, 28, 29, 34, 38], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[27], Children { parents: (19, 23), siblings: vec![26, 28, 29, 35, 39], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[28], Children { parents: (14, 23), siblings: vec![21, 26, 27, 29], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[29], Children { parents: (2, 23), siblings: vec![2, 9, 16, 22, 26, 27, 28], value: 0, possible_values: vec![6, 7] });
    assert_eq!(children[30], Children { parents: (3, 24), siblings: vec![3, 10, 18, 24, 31, 32, 33], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[31], Children { parents: (16, 24), siblings: vec![25, 30, 32, 33], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[32], Children { parents: (21, 24), siblings: vec![30, 31, 33, 36, 44], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[33], Children { parents: (22, 24), siblings: vec![30, 31, 32, 37, 45], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[34], Children { parents: (18, 25), siblings: vec![26, 35, 38], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[35], Children { parents: (19, 25), siblings: vec![27, 34, 39], value: 0, possible_values: vec![9] });
    assert_eq!(children[36], Children { parents: (21, 30), siblings: vec![32, 37, 44], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[37], Children { parents: (22, 30), siblings: vec![33, 36, 45], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[38], Children { parents: (18, 31), siblings: vec![26, 34, 39, 40, 41], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[39], Children { parents: (19, 31), siblings: vec![27, 35, 38, 40, 41], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[40], Children { parents: (26, 31), siblings: vec![38, 39, 41, 46], value: 0, possible_values: vec![6, 7] });
    assert_eq!(children[41], Children { parents: (27, 31), siblings: vec![38, 39, 40, 47, 53, 61, 68], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[42], Children { parents: (28, 33), siblings: vec![43, 44, 45, 49, 55, 62, 69], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[43], Children { parents: (29, 33), siblings: vec![42, 44, 45, 50], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[44], Children { parents: (21, 33), siblings: vec![32, 36, 42, 43, 45], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[45], Children { parents: (22, 33), siblings: vec![33, 37, 42, 43, 44], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[46], Children { parents: (26, 36), siblings: vec![40, 47, 48, 49, 50], value: 0, possible_values: vec![1, 2, 3, 6] });
    assert_eq!(children[47], Children { parents: (27, 36), siblings: vec![41, 46, 48, 49, 50, 53, 61, 68], value: 0, possible_values: vec![4, 6] });
    assert_eq!(children[48], Children { parents: (32, 36), siblings: vec![46, 47, 49, 50, 54], value: 0, possible_values: vec![3, 4] });
    assert_eq!(children[49], Children { parents: (28, 36), siblings: vec![42, 46, 47, 48, 50, 55, 62, 69], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[50], Children { parents: (29, 36), siblings: vec![43, 46, 47, 48, 49], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[51], Children { parents: (34, 39), siblings: vec![52, 58], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[52], Children { parents: (35, 39), siblings: vec![51, 59, 66], value: 0, possible_values: vec![9] });
    assert_eq!(children[53], Children { parents: (27, 41), siblings: vec![41, 47, 54, 55, 61, 68], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[54], Children { parents: (32, 41), siblings: vec![48, 53, 55], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[55], Children { parents: (28, 41), siblings: vec![42, 49, 53, 54, 62, 69], value: 0, possible_values: vec![6] });
    assert_eq!(children[56], Children { parents: (37, 43), siblings: vec![57, 64, 71], value: 0, possible_values: vec![1, 2, 4, 5] });
    assert_eq!(children[57], Children { parents: (38, 43), siblings: vec![56, 65], value: 0, possible_values: vec![1] });
    assert_eq!(children[58], Children { parents: (34, 44), siblings: vec![51, 59, 60, 61], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[59], Children { parents: (35, 44), siblings: vec![52, 58, 60, 61, 66], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[60], Children { parents: (40, 44), siblings: vec![58, 59, 61, 67], value: 0, possible_values: vec![6, 7] });
    assert_eq!(children[61], Children { parents: (27, 44), siblings: vec![41, 47, 53, 58, 59, 60, 68], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[62], Children { parents: (28, 45), siblings: vec![42, 49, 55, 63, 64, 65, 69], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[63], Children { parents: (42, 45), siblings: vec![62, 64, 65, 70], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[64], Children { parents: (37, 45), siblings: vec![56, 62, 63, 65, 71], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[65], Children { parents: (38, 45), siblings: vec![57, 62, 63, 64], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[66], Children { parents: (35, 46), siblings: vec![52, 59, 67, 68], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[67], Children { parents: (40, 46), siblings: vec![60, 66, 68], value: 0, possible_values: vec![1, 2, 3, 5, 6, 7] });
    assert_eq!(children[68], Children { parents: (27, 46), siblings: vec![41, 47, 53, 61, 66, 67], value: 0, possible_values: vec![4, 6, 7, 8, 9] });
    assert_eq!(children[69], Children { parents: (28, 47), siblings: vec![42, 49, 55, 62, 70, 71], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[70], Children { parents: (42, 47), siblings: vec![63, 69, 71], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[71], Children { parents: (37, 47), siblings: vec![56, 64, 69, 70], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_2() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "puzzles\\Kakuro_input2.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    let parents = parents_and_children.0;
    let children = parents_and_children.1;

    assert_eq!(parents.len(), 66);
    assert_eq!(children.len(), 97);

    assert_eq!(parents[0], Parents { children: vec![0, 5, 14, 22], sum: 13, value_size: "13-4".to_string(), combinations: vec![vec![1, 2, 3, 7], vec![1, 2, 4, 6], vec![1, 3, 4, 5]] });
    assert_eq!(parents[1], Parents { children: vec![1, 6], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[2], Parents { children: vec![2, 9], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[3], Parents { children: vec![3, 10, 18], sum: 8, value_size: "8-3".to_string(), combinations: vec![vec![1, 2, 5], vec![1, 3, 4]] });
    assert_eq!(parents[4], Parents { children: vec![4, 13], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[5], Parents { children: vec![0, 1], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[6], Parents { children: vec![7, 15], sum: 13, value_size: "13-2".to_string(), combinations: vec![vec![4, 9], vec![5, 8], vec![6, 7]] });
    assert_eq!(parents[7], Parents { children: vec![8, 17, 25], sum: 6, value_size: "6-3".to_string(), combinations: vec![vec![1, 2, 3]] });
    assert_eq!(parents[8], Parents { children: vec![2, 3], sum: 5, value_size: "5-2".to_string(), combinations: vec![vec![1, 4], vec![2, 3]] });
    assert_eq!(parents[9], Parents { children: vec![11, 20, 28], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[10], Parents { children: vec![12, 21, 29], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[11], Parents { children: vec![4, 5, 6, 7], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[12], Parents { children: vec![16, 24], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[13], Parents { children: vec![8, 9, 10], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[14], Parents { children: vec![19, 27, 34, 41], sum: 22, value_size: "22-4".to_string(), combinations: vec![vec![1, 4, 8, 9], vec![1, 5, 7, 9], vec![1, 6, 7, 8], vec![2, 3, 8, 9], vec![2, 4, 7, 9], vec![2, 5, 6, 9], vec![2, 5, 7, 8], vec![3, 4, 6, 9], vec![3, 4, 7, 8], vec![3, 5, 6, 8], vec![4, 5, 6, 7]] });
    assert_eq!(parents[15], Parents { children: vec![11, 12], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[16], Parents { children: vec![13, 14], sum: 12, value_size: "12-2".to_string(), combinations: vec![vec![3, 9], vec![4, 8], vec![5, 7]] });
    assert_eq!(parents[17], Parents { children: vec![23, 30, 36], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[18], Parents { children: vec![15, 16, 17], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[19], Parents { children: vec![26, 32, 39, 49], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[20], Parents { children: vec![18, 19, 20, 21], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[21], Parents { children: vec![22, 23], sum: 10, value_size: "10-2".to_string(), combinations: vec![vec![1, 9], vec![2, 8], vec![3, 7], vec![4, 6]] });
    assert_eq!(parents[22], Parents { children: vec![31, 37, 46, 56, 63], sum: 34, value_size: "34-5".to_string(), combinations: vec![vec![4, 6, 7, 8, 9]] });
    assert_eq!(parents[23], Parents { children: vec![24, 25, 26], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[24], Parents { children: vec![33, 40, 50, 59, 65], sum: 31, value_size: "31-5".to_string(), combinations: vec![vec![1, 6, 7, 8, 9], vec![2, 5, 7, 8, 9], vec![3, 4, 7, 8, 9], vec![3, 5, 6, 8, 9], vec![4, 5, 6, 7, 9]] });
    assert_eq!(parents[25], Parents { children: vec![27, 28, 29], sum: 18, value_size: "18-3".to_string(), combinations: vec![vec![1, 8, 9], vec![2, 7, 9], vec![3, 6, 9], vec![3, 7, 8], vec![4, 5, 9], vec![4, 6, 8], vec![5, 6, 7]] });
    assert_eq!(parents[26], Parents { children: vec![35, 45, 54], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[27], Parents { children: vec![30, 31], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[28], Parents { children: vec![38, 48, 58], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[29], Parents { children: vec![32, 33, 34], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[30], Parents { children: vec![42, 51, 61], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[31], Parents { children: vec![43, 52], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[32], Parents { children: vec![44, 53], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[33], Parents { children: vec![35, 36, 37], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[34], Parents { children: vec![47, 57, 64, 70], sum: 24, value_size: "24-4".to_string(), combinations: vec![vec![1, 6, 8, 9], vec![2, 5, 8, 9], vec![2, 6, 7, 9], vec![3, 4, 8, 9], vec![3, 5, 7, 9], vec![3, 6, 7, 8], vec![4, 5, 6, 9], vec![4, 5, 7, 8]] });
    assert_eq!(parents[35], Parents { children: vec![38, 39, 40, 41, 42, 43], sum: 39, value_size: "39-6".to_string(), combinations: vec![vec![4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[36], Parents { children: vec![44, 45], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[37], Parents { children: vec![55, 62, 69, 77], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[38], Parents { children: vec![46, 47, 48, 49, 50], sum: 35, value_size: "35-5".to_string(), combinations: vec![vec![5, 6, 7, 8, 9]] });
    assert_eq!(parents[39], Parents { children: vec![60, 66, 73], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[40], Parents { children: vec![51, 52], sum: 9, value_size: "9-2".to_string(), combinations: vec![vec![1, 8], vec![2, 7], vec![3, 6], vec![4, 5]] });
    assert_eq!(parents[41], Parents { children: vec![53, 54, 55, 56, 57, 58], sum: 34, value_size: "34-6".to_string(), combinations: vec![vec![1, 3, 6, 7, 8, 9], vec![1, 4, 5, 7, 8, 9], vec![2, 3, 5, 7, 8, 9], vec![2, 4, 5, 6, 8, 9], vec![3, 4, 5, 6, 7, 9]] });
    assert_eq!(parents[42], Parents { children: vec![59, 60, 61], sum: 6, value_size: "6-3".to_string(), combinations: vec![vec![1, 2, 3]] });
    assert_eq!(parents[43], Parents { children: vec![67, 75, 84], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[44], Parents { children: vec![68, 76, 85], sum: 12, value_size: "12-3".to_string(), combinations: vec![vec![1, 2, 9], vec![1, 3, 8], vec![1, 4, 7], vec![1, 5, 6], vec![2, 3, 7], vec![2, 4, 6], vec![3, 4, 5]] });
    assert_eq!(parents[45], Parents { children: vec![62, 63, 64], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[46], Parents { children: vec![71, 79, 88], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[47], Parents { children: vec![72, 80], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[48], Parents { children: vec![65, 66], sum: 7, value_size: "7-2".to_string(), combinations: vec![vec![1, 6], vec![2, 5], vec![3, 4]] });
    assert_eq!(parents[49], Parents { children: vec![74, 82, 91, 96], sum: 29, value_size: "29-4".to_string(), combinations: vec![vec![5, 7, 8, 9]] });
    assert_eq!(parents[50], Parents { children: vec![67, 68, 69], sum: 12, value_size: "12-3".to_string(), combinations: vec![vec![1, 2, 9], vec![1, 3, 8], vec![1, 4, 7], vec![1, 5, 6], vec![2, 3, 7], vec![2, 4, 6], vec![3, 4, 5]] });
    assert_eq!(parents[51], Parents { children: vec![78, 86, 93], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[52], Parents { children: vec![70, 71, 72], sum: 18, value_size: "18-3".to_string(), combinations: vec![vec![1, 8, 9], vec![2, 7, 9], vec![3, 6, 9], vec![3, 7, 8], vec![4, 5, 9], vec![4, 6, 8], vec![5, 6, 7]] });
    assert_eq!(parents[53], Parents { children: vec![81, 89], sum: 9, value_size: "9-2".to_string(), combinations: vec![vec![1, 8], vec![2, 7], vec![3, 6], vec![4, 5]] });
    assert_eq!(parents[54], Parents { children: vec![73, 74], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[55], Parents { children: vec![83, 92], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[56], Parents { children: vec![75, 76, 77, 78], sum: 29, value_size: "29-4".to_string(), combinations: vec![vec![5, 7, 8, 9]] });
    assert_eq!(parents[57], Parents { children: vec![87, 94], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[58], Parents { children: vec![79, 80, 81], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[59], Parents { children: vec![90, 95], sum: 10, value_size: "10-2".to_string(), combinations: vec![vec![1, 9], vec![2, 8], vec![3, 7], vec![4, 6]] });
    assert_eq!(parents[60], Parents { children: vec![82, 83], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[61], Parents { children: vec![84, 85], sum: 8, value_size: "8-2".to_string(), combinations: vec![vec![1, 7], vec![2, 6], vec![3, 5]] });
    assert_eq!(parents[62], Parents { children: vec![86, 87, 88], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[63], Parents { children: vec![89, 90, 91, 92], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[64], Parents { children: vec![93, 94], sum: 12, value_size: "12-2".to_string(), combinations: vec![vec![3, 9], vec![4, 8], vec![5, 7]] });
    assert_eq!(parents[65], Parents { children: vec![95, 96], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
  
    assert_eq!(children[0], Children { parents: (0, 5), siblings: vec![1, 5, 14, 22], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[1], Children { parents: (1, 5), siblings: vec![0, 6], value: 0, possible_values: vec![3] });
    assert_eq!(children[2], Children { parents: (2, 8), siblings: vec![3, 9], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[3], Children { parents: (3, 8), siblings: vec![2, 10, 18], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[4], Children { parents: (4, 11), siblings: vec![5, 6, 7, 13], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[5], Children { parents: (0, 11), siblings: vec![0, 4, 6, 7, 14, 22], value: 0, possible_values: vec![6, 7] });
    assert_eq!(children[6], Children { parents: (1, 11), siblings: vec![1, 4, 5, 7], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[7], Children { parents: (6, 11), siblings: vec![4, 5, 6, 15], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[8], Children { parents: (7, 13), siblings: vec![9, 10, 17, 25], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[9], Children { parents: (2, 13), siblings: vec![2, 8, 10], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[10], Children { parents: (3, 13), siblings: vec![3, 8, 9, 18], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[11], Children { parents: (9, 15), siblings: vec![12, 20, 28], value: 0, possible_values: vec![7] });
    assert_eq!(children[12], Children { parents: (10, 15), siblings: vec![11, 21, 29], value: 0, possible_values: vec![9] });
    assert_eq!(children[13], Children { parents: (4, 16), siblings: vec![4, 14], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[14], Children { parents: (0, 16), siblings: vec![0, 5, 13, 22], value: 0, possible_values: vec![3, 4, 5, 7] });
    assert_eq!(children[15], Children { parents: (6, 18), siblings: vec![7, 16, 17], value: 0, possible_values: vec![4, 5, 6, 7] });
    assert_eq!(children[16], Children { parents: (12, 18), siblings: vec![15, 17, 24], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[17], Children { parents: (7, 18), siblings: vec![8, 15, 16, 25], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[18], Children { parents: (3, 20), siblings: vec![3, 10, 19, 20, 21], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[19], Children { parents: (14, 20), siblings: vec![18, 20, 21, 27, 34, 41], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[20], Children { parents: (9, 20), siblings: vec![11, 18, 19, 21, 28], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[21], Children { parents: (10, 20), siblings: vec![12, 18, 19, 20, 29], value: 0, possible_values: vec![6] });
    assert_eq!(children[22], Children { parents: (0, 21), siblings: vec![0, 5, 14, 23], value: 0, possible_values: vec![1, 2, 3, 4, 6, 7] });
    assert_eq!(children[23], Children { parents: (17, 21), siblings: vec![22, 30, 36], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[24], Children { parents: (12, 23), siblings: vec![16, 25, 26], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[25], Children { parents: (7, 23), siblings: vec![8, 17, 24, 26], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[26], Children { parents: (19, 23), siblings: vec![24, 25, 32, 39, 49], value: 0, possible_values: vec![6, 7] });
    assert_eq!(children[27], Children { parents: (14, 25), siblings: vec![19, 28, 29, 34, 41], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[28], Children { parents: (9, 25), siblings: vec![11, 20, 27, 29], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[29], Children { parents: (10, 25), siblings: vec![12, 21, 27, 28], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[30], Children { parents: (17, 27), siblings: vec![23, 31, 36], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[31], Children { parents: (22, 27), siblings: vec![30, 37, 46, 56, 63], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[32], Children { parents: (19, 29), siblings: vec![26, 33, 34, 39, 49], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[33], Children { parents: (24, 29), siblings: vec![32, 34, 40, 50, 59, 65], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[34], Children { parents: (14, 29), siblings: vec![19, 27, 32, 33, 41], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[35], Children { parents: (26, 33), siblings: vec![36, 37, 45, 54], value: 0, possible_values: vec![6] });
    assert_eq!(children[36], Children { parents: (17, 33), siblings: vec![23, 30, 35, 37], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[37], Children { parents: (22, 33), siblings: vec![31, 35, 36, 46, 56, 63], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[38], Children { parents: (28, 35), siblings: vec![39, 40, 41, 42, 43, 48, 58], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[39], Children { parents: (19, 35), siblings: vec![26, 32, 38, 40, 41, 42, 43, 49], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[40], Children { parents: (24, 35), siblings: vec![33, 38, 39, 41, 42, 43, 50, 59, 65], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[41], Children { parents: (14, 35), siblings: vec![19, 27, 34, 38, 39, 40, 42, 43], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[42], Children { parents: (30, 35), siblings: vec![38, 39, 40, 41, 43, 51, 61], value: 0, possible_values: vec![4] });
    assert_eq!(children[43], Children { parents: (31, 35), siblings: vec![38, 39, 40, 41, 42, 52], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[44], Children { parents: (32, 36), siblings: vec![45, 53], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[45], Children { parents: (26, 36), siblings: vec![35, 44, 54], value: 0, possible_values: vec![2, 3, 4, 5, 6] });
    assert_eq!(children[46], Children { parents: (22, 38), siblings: vec![31, 37, 47, 48, 49, 50, 56, 63], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[47], Children { parents: (34, 38), siblings: vec![46, 48, 49, 50, 57, 64, 70], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[48], Children { parents: (28, 38), siblings: vec![38, 46, 47, 49, 50, 58], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[49], Children { parents: (19, 38), siblings: vec![26, 32, 39, 46, 47, 48, 50], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[50], Children { parents: (24, 38), siblings: vec![33, 40, 46, 47, 48, 49, 59, 65], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[51], Children { parents: (30, 40), siblings: vec![42, 52, 61], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[52], Children { parents: (31, 40), siblings: vec![43, 51], value: 0, possible_values: vec![7] });
    assert_eq!(children[53], Children { parents: (32, 41), siblings: vec![44, 54, 55, 56, 57, 58], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[54], Children { parents: (26, 41), siblings: vec![35, 45, 53, 55, 56, 57, 58], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[55], Children { parents: (37, 41), siblings: vec![53, 54, 56, 57, 58, 62, 69, 77], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[56], Children { parents: (22, 41), siblings: vec![31, 37, 46, 53, 54, 55, 57, 58, 63], value: 0, possible_values: vec![4, 6, 7, 8, 9] });
    assert_eq!(children[57], Children { parents: (34, 41), siblings: vec![47, 53, 54, 55, 56, 58, 64, 70], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[58], Children { parents: (28, 41), siblings: vec![38, 48, 53, 54, 55, 56, 57], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[59], Children { parents: (24, 42), siblings: vec![33, 40, 50, 60, 61, 65], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[60], Children { parents: (39, 42), siblings: vec![59, 61, 66, 73], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[61], Children { parents: (30, 42), siblings: vec![42, 51, 59, 60], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[62], Children { parents: (37, 45), siblings: vec![55, 63, 64, 69, 77], value: 0, possible_values: vec![1, 2]});
    assert_eq!(children[63], Children { parents: (22, 45), siblings: vec![31, 37, 46, 56, 62, 64], value: 0, possible_values: vec![4] });
    assert_eq!(children[64], Children { parents: (34, 45), siblings: vec![47, 57, 62, 63, 70], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[65], Children { parents: (24, 48), siblings: vec![33, 40, 50, 59, 66], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[66], Children { parents: (39, 48), siblings: vec![60, 65, 73], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[67], Children { parents: (43, 50), siblings: vec![68, 69, 75, 84], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[68], Children { parents: (44, 50), siblings: vec![67, 69, 76, 85], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[69], Children { parents: (37, 50), siblings: vec![55, 62, 67, 68, 77], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[70], Children { parents: (34, 52), siblings: vec![47, 57, 64, 71, 72], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[71], Children { parents: (46, 52), siblings: vec![70, 72, 79, 88], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[72], Children { parents: (47, 52), siblings: vec![70, 71, 80], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[73], Children { parents: (39, 54), siblings: vec![60, 66, 74], value: 0, possible_values: vec![2, 4] });
    assert_eq!(children[74], Children { parents: (49, 54), siblings: vec![73, 82, 91, 96], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[75], Children { parents: (43, 56), siblings: vec![67, 76, 77, 78, 84], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[76], Children { parents: (44, 56), siblings: vec![68, 75, 77, 78, 85], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[77], Children { parents: (37, 56), siblings: vec![55, 62, 69, 75, 76, 78], value: 0, possible_values: vec![5] });
    assert_eq!(children[78], Children { parents: (51, 56), siblings: vec![75, 76, 77, 86, 93], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[79], Children { parents: (46, 58), siblings: vec![71, 80, 81, 88], value: 0, possible_values: vec![7, 8] });
    assert_eq!(children[80], Children { parents: (47, 58), siblings: vec![72, 79, 81], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[81], Children { parents: (53, 58), siblings: vec![79, 80, 89], value: 0, possible_values: vec![7, 8] });
    assert_eq!(children[82], Children { parents: (49, 60), siblings: vec![74, 83, 91, 96], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[83], Children { parents: (55, 60), siblings: vec![82, 92], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[84], Children { parents: (43, 61), siblings: vec![67, 75, 85], value: 0, possible_values: vec![6] });
    assert_eq!(children[85], Children { parents: (44, 61), siblings: vec![68, 76, 84], value: 0, possible_values: vec![1, 2, 3, 5, 6, 7] });
    assert_eq!(children[86], Children { parents: (51, 62), siblings: vec![78, 87, 88, 93], value: 0, possible_values: vec![7, 8] });
    assert_eq!(children[87], Children { parents: (57, 62), siblings: vec![86, 88, 94], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[88], Children { parents: (46, 62), siblings: vec![71, 79, 86, 87], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[89], Children { parents: (53, 63), siblings: vec![81, 90, 91, 92], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[90], Children { parents: (59, 63), siblings: vec![89, 91, 92, 95], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[91], Children { parents: (49, 63), siblings: vec![74, 82, 89, 90, 92, 96], value: 0, possible_values: vec![5] });
    assert_eq!(children[92], Children { parents: (55, 63), siblings: vec![83, 89, 90, 91], value: 0, possible_values: vec![2, 3, 5] });
    assert_eq!(children[93], Children { parents: (51, 64), siblings: vec![78, 86, 94], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[94], Children { parents: (57, 64), siblings: vec![87, 93], value: 0, possible_values: vec![3] });
    assert_eq!(children[95], Children { parents: (59, 65), siblings: vec![90, 96], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[96], Children { parents: (49, 65), siblings: vec![74, 82, 91, 95], value: 0, possible_values: vec![7, 9] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_3() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "puzzles\\Kakuro_input3.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    let parents = parents_and_children.0;
    let children = parents_and_children.1;

    assert_eq!(parents.len(), 56);
    assert_eq!(children.len(), 112);

    assert_eq!(parents[0], Parents { children: vec![0, 9, 19, 28, 37, 46], sum: 38, value_size: "38-6".to_string(), combinations: vec![vec![3, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[1], Parents { children: vec![1, 10], sum: 8, value_size: "8-2".to_string(), combinations: vec![vec![1, 7], vec![2, 6], vec![3, 5]] });
    assert_eq!(parents[2], Parents { children: vec![2, 11, 20], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[3], Parents { children: vec![3, 12, 21, 30, 40, 49], sum: 23, value_size: "23-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 8], vec![1, 2, 3, 4, 6, 7]] });
    assert_eq!(parents[4], Parents { children: vec![4, 13, 23, 32, 41, 50], sum: 27, value_size: "27-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 8, 9], vec![1, 2, 3, 5, 7, 9], vec![1, 2, 3, 6, 7, 8], vec![1, 2, 4, 5, 6, 9], vec![1, 2, 4, 5, 7, 8], vec![1, 3, 4, 5, 6, 8], vec![2, 3, 4, 5, 6, 7]] });
    assert_eq!(parents[5], Parents { children: vec![5, 14, 24], sum: 22, value_size: "22-3".to_string(), combinations: vec![vec![5, 8, 9], vec![6, 7, 9]] });
    assert_eq!(parents[6], Parents { children: vec![6, 15], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[7], Parents { children: vec![7, 16, 25, 34, 44, 53], sum: 37, value_size: "37-6".to_string(), combinations: vec![vec![2, 5, 6, 7, 8, 9], vec![3, 4, 6, 7, 8, 9]] });
    assert_eq!(parents[8], Parents { children: vec![8, 18, 27, 36], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[9], Parents { children: vec![0, 1, 2, 3], sum: 10, value_size: "10-4".to_string(), combinations: vec![vec![1, 2, 3, 4]] });
    assert_eq!(parents[10], Parents { children: vec![4, 5, 6, 7], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[11], Parents { children: vec![17, 26, 35, 45], sum: 29, value_size: "29-4".to_string(), combinations: vec![vec![5, 7, 8, 9]] });
    assert_eq!(parents[12], Parents { children: vec![8, 9, 10, 11, 12], sum: 17, value_size: "17-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 7], vec![1, 2, 3, 5, 6]] });
    assert_eq!(parents[13], Parents { children: vec![22, 31], sum: 14, value_size: "14-2".to_string(), combinations: vec![vec![5, 9], vec![6, 8]] });
    assert_eq!(parents[14], Parents { children: vec![13, 14, 15, 16, 17], sum: 35, value_size: "35-5".to_string(), combinations: vec![vec![5, 6, 7, 8, 9]] });
    assert_eq!(parents[15], Parents { children: vec![18, 19], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[16], Parents { children: vec![29, 38, 47, 54, 59, 68, 78], sum: 29, value_size: "29-7".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 8]] });
    assert_eq!(parents[17], Parents { children: vec![20, 21, 22, 23, 24], sum: 34, value_size: "34-5".to_string(), combinations: vec![vec![4, 6, 7, 8, 9]] });
    assert_eq!(parents[18], Parents { children: vec![33, 43, 52, 57, 64, 73, 82], sum: 41, value_size: "41-7".to_string(), combinations: vec![vec![2, 4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[19], Parents { children: vec![25, 26], sum: 15, value_size: "15-2".to_string(), combinations: vec![vec![6, 9], vec![7, 8]] });
    assert_eq!(parents[20], Parents { children: vec![27, 28, 29], sum: 22, value_size: "22-3".to_string(), combinations: vec![vec![5, 8, 9], vec![6, 7, 9]] });
    assert_eq!(parents[21], Parents { children: vec![39, 48, 55, 60, 69], sum: 34, value_size: "34-5".to_string(), combinations: vec![vec![4, 6, 7, 8, 9]] });
    assert_eq!(parents[22], Parents { children: vec![30, 31, 32], sum: 18, value_size: "18-3".to_string(), combinations: vec![vec![1, 8, 9], vec![2, 7, 9], vec![3, 6, 9], vec![3, 7, 8], vec![4, 5, 9], vec![4, 6, 8], vec![5, 6, 7]] });
    assert_eq!(parents[23], Parents { children: vec![42, 51, 56, 63, 72], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[24], Parents { children: vec![33, 34, 35], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[25], Parents { children: vec![36, 37, 38, 39, 40], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[26], Parents { children: vec![41, 42, 43, 44, 45], sum: 20, value_size: "20-5".to_string(), combinations: vec![vec![1, 2, 3, 5, 9], vec![1, 2, 3, 6, 8], vec![1, 2, 4, 5, 8], vec![1, 2, 4, 6, 7], vec![1, 3, 4, 5, 7], vec![2, 3, 4, 5, 6]] });
    assert_eq!(parents[27], Parents { children: vec![46, 47, 48, 49], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[28], Parents { children: vec![50, 51, 52, 53], sum: 19, value_size: "19-4".to_string(), combinations: vec![vec![1, 2, 7, 9], vec![1, 3, 6, 9], vec![1, 3, 7, 8], vec![1, 4, 5, 9], vec![1, 4, 6, 8], vec![1, 5, 6, 7], vec![2, 3, 5, 9], vec![2, 3, 6, 8], vec![2, 4, 5, 8], vec![2, 4, 6, 7], vec![3, 4, 5, 7]] });
    assert_eq!(parents[29], Parents { children: vec![58, 67, 77, 86, 95, 104], sum: 38, value_size: "38-6".to_string(), combinations: vec![vec![3, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[30], Parents { children: vec![54, 55], sum: 8, value_size: "8-2".to_string(), combinations: vec![vec![1, 7], vec![2, 6], vec![3, 5]] });
    assert_eq!(parents[31], Parents { children: vec![61, 70, 79, 88, 98, 107], sum: 21, value_size: "21-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6]] });
    assert_eq!(parents[32], Parents { children: vec![62, 71, 81, 90, 99, 108], sum: 38, value_size: "38-6".to_string(), combinations: vec![vec![3, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[33], Parents { children: vec![56, 57], sum: 14, value_size: "14-2".to_string(), combinations: vec![vec![5, 9], vec![6, 8]] });
    assert_eq!(parents[34], Parents { children: vec![65, 74, 83, 92, 102, 111], sum: 21, value_size: "21-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6]] });
    assert_eq!(parents[35], Parents { children: vec![66, 76, 85, 94], sum: 25, value_size: "25-4".to_string(), combinations: vec![vec![1, 7, 8, 9], vec![2, 6, 8, 9], vec![3, 5, 8, 9], vec![3, 6, 7, 9], vec![4, 5, 7, 9], vec![4, 6, 7, 8]] });
    assert_eq!(parents[36], Parents { children: vec![58, 59, 60, 61], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[37], Parents { children: vec![62, 63, 64, 65], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[38], Parents { children: vec![75, 84, 93, 103], sum: 14, value_size: "14-4".to_string(), combinations: vec![vec![1, 2, 3, 8], vec![1, 2, 4, 7], vec![1, 2, 5, 6], vec![1, 3, 4, 6], vec![2, 3, 4, 5]] });
    assert_eq!(parents[39], Parents { children: vec![66, 67, 68, 69, 70], sum: 25, value_size: "25-5".to_string(), combinations: vec![vec![1, 2, 5, 8, 9], vec![1, 2, 6, 7, 9], vec![1, 3, 4, 8, 9], vec![1, 3, 5, 7, 9], vec![1, 3, 6, 7, 8], vec![1, 4, 5, 6, 9], vec![1, 4, 5, 7, 8], vec![2, 3, 4, 7, 9], vec![2, 3, 5, 6, 9], vec![2, 3, 5, 7, 8], vec![2, 4, 5, 6, 8], vec![3, 4, 5, 6, 7]] });
    assert_eq!(parents[40], Parents { children: vec![80, 89], sum: 14, value_size: "14-2".to_string(), combinations: vec![vec![5, 9], vec![6, 8]] });
    assert_eq!(parents[41], Parents { children: vec![71, 72, 73, 74, 75], sum: 34, value_size: "34-5".to_string(), combinations: vec![vec![4, 6, 7, 8, 9]] });
    assert_eq!(parents[42], Parents { children: vec![76, 77, 78], sum: 22, value_size: "22-3".to_string(), combinations: vec![vec![5, 8, 9], vec![6, 7, 9]] });
    assert_eq!(parents[43], Parents { children: vec![87, 97, 106], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[44], Parents { children: vec![79, 80, 81], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[45], Parents { children: vec![91, 100, 109], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[46], Parents { children: vec![82, 83, 84], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[47], Parents { children: vec![85, 86], sum: 12, value_size: "12-2".to_string(), combinations: vec![vec![3, 9], vec![4, 8], vec![5, 7]] });
    assert_eq!(parents[48], Parents { children: vec![96, 105], sum: 14, value_size: "14-2".to_string(), combinations: vec![vec![5, 9], vec![6, 8]] });
    assert_eq!(parents[49], Parents { children: vec![87, 88, 89, 90, 91], sum: 18, value_size: "18-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 8], vec![1, 2, 3, 5, 7], vec![1, 2, 4, 5, 6]] });
    assert_eq!(parents[50], Parents { children: vec![101, 110], sum: 5, value_size: "5-2".to_string(), combinations: vec![vec![1, 4], vec![2, 3]] });
    assert_eq!(parents[51], Parents { children: vec![92, 93], sum: 6, value_size: "6-2".to_string(), combinations: vec![vec![1, 5], vec![2, 4]] });
    assert_eq!(parents[52], Parents { children: vec![94, 95, 96, 97, 98], sum: 35, value_size: "35-5".to_string(), combinations: vec![vec![5, 6, 7, 8, 9]] });
    assert_eq!(parents[53], Parents { children: vec![99, 100, 101, 102, 103], sum: 17, value_size: "17-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 7], vec![1, 2, 3, 5, 6]] });
    assert_eq!(parents[54], Parents { children: vec![104, 105, 106, 107], sum: 17, value_size: "17-4".to_string(), combinations: vec![vec![1, 2, 5, 9], vec![1, 2, 6, 8], vec![1, 3, 4, 9], vec![1, 3, 5, 8], vec![1, 3, 6, 7], vec![1, 4, 5, 7], vec![2, 3, 4, 8], vec![2, 3, 5, 7], vec![2, 4, 5, 6]] });
    assert_eq!(parents[55], Parents { children: vec![108, 109, 110, 111], sum: 18, value_size: "18-4".to_string(), combinations: vec![vec![1, 2, 6, 9], vec![1, 2, 7, 8], vec![1, 3, 5, 9], vec![1, 3, 6, 8], vec![1, 4, 5, 8], vec![1, 4, 6, 7], vec![2, 3, 4, 9], vec![2, 3, 5, 8], vec![2, 3, 6, 7], vec![2, 4, 5, 7], vec![3, 4, 5, 6]] });
  
    assert_eq!(children[0], Children { parents: (0, 9), siblings: vec![1, 2, 3, 9, 19, 28, 37, 46], value: 0, possible_values: vec![3] });
    assert_eq!(children[1], Children { parents: (1, 9), siblings: vec![0, 2, 3, 10], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[2], Children { parents: (2, 9), siblings: vec![0, 1, 3, 11, 20], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[3], Children { parents: (3, 9), siblings: vec![0, 1, 2, 12, 21, 30, 40, 49], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[4], Children { parents: (4, 10), siblings: vec![5, 6, 7, 13, 23, 32, 41, 50], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[5], Children { parents: (5, 10), siblings: vec![4, 6, 7, 14, 24], value: 0, possible_values: vec![5, 6] });
    assert_eq!(children[6], Children { parents: (6, 10), siblings: vec![4, 5, 7, 15], value: 0, possible_values: vec![2, 3, 4, 5, 6] });
    assert_eq!(children[7], Children { parents: (7, 10), siblings: vec![4, 5, 6, 16, 25, 34, 44, 53], value: 0, possible_values: vec![2, 3, 4, 5, 6] });
    assert_eq!(children[8], Children { parents: (8, 12), siblings: vec![9, 10, 11, 12, 18, 27, 36], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[9], Children { parents: (0, 12), siblings: vec![0, 8, 10, 11, 12, 19, 28, 37, 46], value: 0, possible_values: vec![3, 5, 6, 7] });
    assert_eq!(children[10], Children { parents: (1, 12), siblings: vec![1, 8, 9, 11, 12], value: 0, possible_values: vec![1, 2, 3, 5, 6, 7] });
    assert_eq!(children[11], Children { parents: (2, 12), siblings: vec![2, 8, 9, 10, 12, 20], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[12], Children { parents: (3, 12), siblings: vec![3, 8, 9, 10, 11, 21, 30, 40, 49], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[13], Children { parents: (4, 14), siblings: vec![4, 14, 15, 16, 17, 23, 32, 41, 50], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[14], Children { parents: (5, 14), siblings: vec![5, 13, 15, 16, 17, 24], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[15], Children { parents: (6, 14), siblings: vec![6, 13, 14, 16, 17], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[16], Children { parents: (7, 14), siblings: vec![7, 13, 14, 15, 17, 25, 34, 44, 53], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[17], Children { parents: (11, 14), siblings: vec![13, 14, 15, 16, 26, 35, 45], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[18], Children { parents: (8, 15), siblings: vec![8, 19, 27, 36], value: 0, possible_values: vec![2, 3, 5] });
    assert_eq!(children[19], Children { parents: (0, 15), siblings: vec![0, 9, 18, 28, 37, 46], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[20], Children { parents: (2, 17), siblings: vec![2, 11, 21, 22, 23, 24], value: 0, possible_values: vec![4, 6, 7, 8] });
    assert_eq!(children[21], Children { parents: (3, 17), siblings: vec![3, 12, 20, 22, 23, 24, 30, 40, 49], value: 0, possible_values: vec![4, 6, 7, 8] });
    assert_eq!(children[22], Children { parents: (13, 17), siblings: vec![20, 21, 23, 24, 31], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[23], Children { parents: (4, 17), siblings: vec![4, 13, 20, 21, 22, 24, 32, 41, 50], value: 0, possible_values: vec![4, 6, 7, 8, 9] });
    assert_eq!(children[24], Children { parents: (5, 17), siblings: vec![5, 14, 20, 21, 22, 23], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[25], Children { parents: (7, 19), siblings: vec![7, 16, 26, 34, 44, 53], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[26], Children { parents: (11, 19), siblings: vec![17, 25, 35, 45], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[27], Children { parents: (8, 20), siblings: vec![8, 18, 28, 29, 36], value: 0, possible_values: vec![5] });
    assert_eq!(children[28], Children { parents: (0, 20), siblings: vec![0, 9, 19, 27, 29, 37, 46], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[29], Children { parents: (16, 20), siblings: vec![27, 28, 38, 47, 54, 59, 68, 78], value: 0, possible_values: vec![5, 6, 8] });
    assert_eq!(children[30], Children { parents: (3, 22), siblings: vec![3, 12, 21, 31, 32, 40, 49], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[31], Children { parents: (13, 22), siblings: vec![22, 30, 32], value: 0, possible_values: vec![5, 6, 8, 9] });
    assert_eq!(children[32], Children { parents: (4, 22), siblings: vec![4, 13, 23, 30, 31, 41, 50], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[33], Children { parents: (18, 24), siblings: vec![34, 35, 43, 52, 57, 64, 73, 82], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[34], Children { parents: (7, 24), siblings: vec![7, 16, 25, 33, 35, 44, 53], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[35], Children { parents: (11, 24), siblings: vec![17, 26, 33, 34, 45], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[36], Children { parents: (8, 25), siblings: vec![8, 18, 27, 37, 38, 39, 40], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[37], Children { parents: (0, 25), siblings: vec![0, 9, 19, 28, 36, 38, 39, 40, 46], value: 0, possible_values: vec![3, 6] });
    assert_eq!(children[38], Children { parents: (16, 25), siblings: vec![29, 36, 37, 39, 40, 47, 54, 59, 68, 78], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[39], Children { parents: (21, 25), siblings: vec![36, 37, 38, 40, 48, 55, 60, 69], value: 0, possible_values: vec![4, 6] });
    assert_eq!(children[40], Children { parents: (3, 25), siblings: vec![3, 12, 21, 30, 36, 37, 38, 39, 49], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[41], Children { parents: (4, 26), siblings: vec![4, 13, 23, 32, 42, 43, 44, 45, 50], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[42], Children { parents: (23, 26), siblings: vec![41, 43, 44, 45, 51, 56, 63, 72], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[43], Children { parents: (18, 26), siblings: vec![33, 41, 42, 44, 45, 52, 57, 64, 73, 82], value: 0, possible_values: vec![2, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[44], Children { parents: (7, 26), siblings: vec![7, 16, 25, 34, 41, 42, 43, 45, 53], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[45], Children { parents: (11, 26), siblings: vec![17, 26, 35, 41, 42, 43, 44], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[46], Children { parents: (0, 27), siblings: vec![0, 9, 19, 28, 37, 47, 48, 49], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[47], Children { parents: (16, 27), siblings: vec![29, 38, 46, 48, 49, 54, 59, 68, 78], value: 0, possible_values: vec![6, 8] });
    assert_eq!(children[48], Children { parents: (21, 27), siblings: vec![39, 46, 47, 49, 55, 60, 69], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[49], Children { parents: (3, 27), siblings: vec![3, 12, 21, 30, 40, 46, 47, 48], value: 0, possible_values: vec![6, 7, 8] });
    assert_eq!(children[50], Children { parents: (4, 28), siblings: vec![4, 13, 23, 32, 41, 51, 52, 53], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[51], Children { parents: (23, 28), siblings: vec![42, 50, 52, 53, 56, 63, 72], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[52], Children { parents: (18, 28), siblings: vec![33, 43, 50, 51, 53, 57, 64, 73, 82], value: 0, possible_values: vec![2, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[53], Children { parents: (7, 28), siblings: vec![7, 16, 25, 34, 44, 50, 51, 52], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[54], Children { parents: (16, 30), siblings: vec![29, 38, 47, 55, 59, 68, 78], value: 0, possible_values: vec![1, 2, 3, 5, 6] });
    assert_eq!(children[55], Children { parents: (21, 30), siblings: vec![39, 48, 54, 60, 69], value: 0, possible_values: vec![6, 7] });
    assert_eq!(children[56], Children { parents: (23, 33), siblings: vec![42, 51, 57, 63, 72], value: 0, possible_values: vec![6] });
    assert_eq!(children[57], Children { parents: (18, 33), siblings: vec![33, 43, 52, 56, 64, 73, 82], value: 0, possible_values: vec![5, 6, 8, 9] });
    assert_eq!(children[58], Children { parents: (29, 36), siblings: vec![59, 60, 61, 67, 77, 86, 95, 104], value: 0, possible_values: vec![3, 5, 6] });
    assert_eq!(children[59], Children { parents: (16, 36), siblings: vec![29, 38, 47, 54, 58, 60, 61, 68, 78], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[60], Children { parents: (21, 36), siblings: vec![39, 48, 55, 58, 59, 61, 69], value: 0, possible_values: vec![4, 6] });
    assert_eq!(children[61], Children { parents: (31, 36), siblings: vec![58, 59, 60, 70, 79, 88, 98, 107], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[62], Children { parents: (32, 37), siblings: vec![63, 64, 65, 71, 81, 90, 99, 108], value: 0, possible_values: vec![3, 5] });
    assert_eq!(children[63], Children { parents: (23, 37), siblings: vec![42, 51, 56, 62, 64, 65, 72], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[64], Children { parents: (18, 37), siblings: vec![33, 43, 52, 57, 62, 63, 65, 73, 82], value: 0, possible_values: vec![2, 5] });
    assert_eq!(children[65], Children { parents: (34, 37), siblings: vec![62, 63, 64, 74, 83, 92, 102, 111], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[66], Children { parents: (35, 39), siblings: vec![67, 68, 69, 70, 76, 85, 94], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[67], Children { parents: (29, 39), siblings: vec![58, 66, 68, 69, 70, 77, 86, 95, 104], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[68], Children { parents: (16, 39), siblings: vec![29, 38, 47, 54, 59, 66, 67, 69, 70, 78], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 8] });
    assert_eq!(children[69], Children { parents: (21, 39), siblings: vec![39, 48, 55, 60, 66, 67, 68, 70], value: 0, possible_values: vec![4, 6, 7, 8, 9] });
    assert_eq!(children[70], Children { parents: (31, 39), siblings: vec![61, 66, 67, 68, 69, 79, 88, 98, 107], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[71], Children { parents: (32, 41), siblings: vec![62, 72, 73, 74, 75, 81, 90, 99, 108], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[72], Children { parents: (23, 41), siblings: vec![42, 51, 56, 63, 71, 73, 74, 75], value: 0, possible_values: vec![4, 6] });
    assert_eq!(children[73], Children { parents: (18, 41), siblings: vec![33, 43, 52, 57, 64, 71, 72, 74, 75, 82], value: 0, possible_values: vec![4, 6, 7, 8, 9] });
    assert_eq!(children[74], Children { parents: (34, 41), siblings: vec![65, 71, 72, 73, 75, 83, 92, 102, 111], value: 0, possible_values: vec![4, 6] });
    assert_eq!(children[75], Children { parents: (38, 41), siblings: vec![71, 72, 73, 74, 84, 93, 103], value: 0, possible_values: vec![4, 6, 7, 8] });
    assert_eq!(children[76], Children { parents: (35, 42), siblings: vec![66, 77, 78, 85, 94], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[77], Children { parents: (29, 42), siblings: vec![58, 67, 76, 78, 86, 95, 104], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[78], Children { parents: (16, 42), siblings: vec![29, 38, 47, 54, 59, 68, 76, 77], value: 0, possible_values: vec![5, 6, 8] });
    assert_eq!(children[79], Children { parents: (31, 44), siblings: vec![61, 70, 80, 81, 88, 98, 107], value: 0, possible_values: vec![6] });
    assert_eq!(children[80], Children { parents: (40, 44), siblings: vec![79, 81, 89], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[81], Children { parents: (32, 44), siblings: vec![62, 71, 79, 80, 90, 99, 108], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[82], Children { parents: (18, 46), siblings: vec![33, 43, 52, 57, 64, 73, 83, 84], value: 0, possible_values: vec![2, 4] });
    assert_eq!(children[83], Children { parents: (34, 46), siblings: vec![65, 74, 82, 84, 92, 102, 111], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[84], Children { parents: (38, 46), siblings: vec![75, 82, 83, 93, 103], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[85], Children { parents: (35, 47), siblings: vec![66, 76, 86, 94], value: 0, possible_values: vec![3, 4, 5, 7, 8, 9] });
    assert_eq!(children[86], Children { parents: (29, 47), siblings: vec![58, 67, 77, 85, 95, 104], value: 0, possible_values: vec![3, 5, 7, 8, 9] });
    assert_eq!(children[87], Children { parents: (43, 49), siblings: vec![88, 89, 90, 91, 97, 106], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[88], Children { parents: (31, 49), siblings: vec![61, 70, 79, 87, 89, 90, 91, 98, 107], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[89], Children { parents: (40, 49), siblings: vec![80, 87, 88, 90, 91], value: 0, possible_values: vec![5, 6, 8] });
    assert_eq!(children[90], Children { parents: (32, 49), siblings: vec![62, 71, 81, 87, 88, 89, 91, 99, 108], value: 0, possible_values: vec![3, 5, 6, 7, 8] });
    assert_eq!(children[91], Children { parents: (45, 49), siblings: vec![87, 88, 89, 90, 100, 109], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[92], Children { parents: (34, 51), siblings: vec![65, 74, 83, 93, 102, 111], value: 0, possible_values: vec![1, 2, 4, 5] });
    assert_eq!(children[93], Children { parents: (38, 51), siblings: vec![75, 84, 92, 103], value: 0, possible_values: vec![1, 2, 4, 5] });
    assert_eq!(children[94], Children { parents: (35, 52), siblings: vec![66, 76, 85, 95, 96, 97, 98], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[95], Children { parents: (29, 52), siblings: vec![58, 67, 77, 86, 94, 96, 97, 98, 104], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[96], Children { parents: (48, 52), siblings: vec![94, 95, 97, 98, 105], value: 0, possible_values: vec![5, 6, 8, 9] });
    assert_eq!(children[97], Children { parents: (43, 52), siblings: vec![87, 94, 95, 96, 98, 106], value: 0, possible_values: vec![5, 6] });
    assert_eq!(children[98], Children { parents: (31, 52), siblings: vec![61, 70, 79, 88, 94, 95, 96, 97, 107], value: 0, possible_values: vec![5, 6] });
    assert_eq!(children[99], Children { parents: (32, 53), siblings: vec![62, 71, 81, 90, 100, 101, 102, 103, 108], value: 0, possible_values: vec![3, 5, 6, 7] });
    assert_eq!(children[100], Children { parents: (45, 53), siblings: vec![91, 99, 101, 102, 103, 109], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[101], Children { parents: (50, 53), siblings: vec![99, 100, 102, 103, 110], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[102], Children { parents: (34, 53), siblings: vec![65, 74, 83, 92, 99, 100, 101, 103, 111], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[103], Children { parents: (38, 53), siblings: vec![75, 84, 93, 99, 100, 101, 102], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[104], Children { parents: (29, 54), siblings: vec![58, 67, 77, 86, 95, 105, 106, 107], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[105], Children { parents: (48, 54), siblings: vec![96, 104, 106, 107], value: 0, possible_values: vec![5, 6, 8, 9] });
    assert_eq!(children[106], Children { parents: (43, 54), siblings: vec![87, 97, 104, 105, 107], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[107], Children { parents: (31, 54), siblings: vec![61, 70, 79, 88, 98, 104, 105, 106], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[108], Children { parents: (32, 55), siblings: vec![62, 71, 81, 90, 99, 109, 110, 111], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[109], Children { parents: (45, 55), siblings: vec![91, 100, 108, 110, 111], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[110], Children { parents: (50, 55), siblings: vec![101, 108, 109, 111], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[111], Children { parents: (34, 55), siblings: vec![65, 74, 83, 92, 102, 108, 109, 110], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_4() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "puzzles\\Kakuro_input4.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    let parents = parents_and_children.0;
    let children = parents_and_children.1;

    assert_eq!(parents.len(), 68);
    assert_eq!(children.len(), 121);

    assert_eq!(parents[0], Parents { children: vec![0, 8, 18, 27, 33, 43], sum: 23, value_size: "23-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 8], vec![1, 2, 3, 4, 6, 7]] });
    assert_eq!(parents[1], Parents { children: vec![1, 9], sum: 14, value_size: "14-2".to_string(), combinations: vec![vec![5, 9], vec![6, 8]] });
    assert_eq!(parents[2], Parents { children: vec![2, 10, 19], sum: 16, value_size: "16-3".to_string(), combinations: vec![vec![1, 6, 9], vec![1, 7, 8], vec![2, 5, 9], vec![2, 6, 8], vec![3, 4, 9], vec![3, 5, 8], vec![3, 6, 7], vec![4, 5, 7]] });
    assert_eq!(parents[3], Parents { children: vec![3, 12, 22, 31, 37], sum: 21, value_size: "21-5".to_string(), combinations: vec![vec![1, 2, 3, 6, 9], vec![1, 2, 3, 7, 8], vec![1, 2, 4, 5, 9], vec![1, 2, 4, 6, 8], vec![1, 2, 5, 6, 7], vec![1, 3, 4, 5, 8], vec![1, 3, 4, 6, 7], vec![2, 3, 4, 5, 7]] });
    assert_eq!(parents[4], Parents { children: vec![4, 13, 23, 32, 38, 46, 54], sum: 29, value_size: "29-7".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 8]] });
    assert_eq!(parents[5], Parents { children: vec![5, 14, 24], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[6], Parents { children: vec![6, 15], sum: 6, value_size: "6-2".to_string(), combinations: vec![vec![1, 5], vec![2, 4]] });
    assert_eq!(parents[7], Parents { children: vec![7, 17, 26], sum: 19, value_size: "19-3".to_string(), combinations: vec![vec![2, 8, 9], vec![3, 7, 9], vec![4, 6, 9], vec![4, 7, 8], vec![5, 6, 8]] });
    assert_eq!(parents[8], Parents { children: vec![0, 1, 2], sum: 22, value_size: "22-3".to_string(), combinations: vec![vec![5, 8, 9], vec![6, 7, 9]] });
    assert_eq!(parents[9], Parents { children: vec![11, 21, 30], sum: 20, value_size: "20-3".to_string(), combinations: vec![vec![3, 8, 9], vec![4, 7, 9], vec![5, 6, 9], vec![5, 7, 8]] });
    assert_eq!(parents[10], Parents { children: vec![3, 4, 5, 6], sum: 16, value_size: "16-4".to_string(), combinations: vec![vec![1, 2, 4, 9], vec![1, 2, 5, 8], vec![1, 2, 6, 7], vec![1, 3, 4, 8], vec![1, 3, 5, 7], vec![1, 4, 5, 6], vec![2, 3, 4, 7], vec![2, 3, 5, 6]] });
    assert_eq!(parents[11], Parents { children: vec![16, 25], sum: 15, value_size: "15-2".to_string(), combinations: vec![vec![6, 9], vec![7, 8]] });
    assert_eq!(parents[12], Parents { children: vec![7, 8, 9, 10], sum: 18, value_size: "18-4".to_string(), combinations: vec![vec![1, 2, 6, 9], vec![1, 2, 7, 8], vec![1, 3, 5, 9], vec![1, 3, 6, 8], vec![1, 4, 5, 8], vec![1, 4, 6, 7], vec![2, 3, 4, 9], vec![2, 3, 5, 8], vec![2, 3, 6, 7], vec![2, 4, 5, 7], vec![3, 4, 5, 6]] });
    assert_eq!(parents[13], Parents { children: vec![20, 29, 36], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[14], Parents { children: vec![11, 12, 13, 14, 15], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[15], Parents { children: vec![16, 17, 18], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[16], Parents { children: vec![28, 34, 44], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[17], Parents { children: vec![19, 20, 21, 22, 23, 24], sum: 38, value_size: "38-6".to_string(), combinations: vec![vec![3, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[18], Parents { children: vec![25, 26, 27, 28], sum: 29, value_size: "29-4".to_string(), combinations: vec![vec![5, 7, 8, 9]] });
    assert_eq!(parents[19], Parents { children: vec![35, 45, 51, 59], sum: 16, value_size: "16-4".to_string(), combinations: vec![vec![1, 2, 4, 9], vec![1, 2, 5, 8], vec![1, 2, 6, 7], vec![1, 3, 4, 8], vec![1, 3, 5, 7], vec![1, 4, 5, 6], vec![2, 3, 4, 7], vec![2, 3, 5, 6]] });
    assert_eq!(parents[20], Parents { children: vec![29, 30, 31, 32], sum: 16, value_size: "16-4".to_string(), combinations: vec![vec![1, 2, 4, 9], vec![1, 2, 5, 8], vec![1, 2, 6, 7], vec![1, 3, 4, 8], vec![1, 3, 5, 7], vec![1, 4, 5, 6], vec![2, 3, 4, 7], vec![2, 3, 5, 6]] });
    assert_eq!(parents[21], Parents { children: vec![39, 47, 55, 63, 70, 78], sum: 39, value_size: "39-6".to_string(), combinations: vec![vec![4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[22], Parents { children: vec![40, 48], sum: 15, value_size: "15-2".to_string(), combinations: vec![vec![6, 9], vec![7, 8]] });
    assert_eq!(parents[23], Parents { children: vec![41, 49, 56], sum: 6, value_size: "6-3".to_string(), combinations: vec![vec![1, 2, 3]] });
    assert_eq!(parents[24], Parents { children: vec![42, 50, 57, 65, 73, 81], sum: 23, value_size: "23-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 8], vec![1, 2, 3, 4, 6, 7]] });
    assert_eq!(parents[25], Parents { children: vec![33, 34, 35, 36], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[26], Parents { children: vec![37, 38, 39, 40], sum: 28, value_size: "28-4".to_string(), combinations: vec![vec![4, 7, 8, 9], vec![5, 6, 8, 9]] });
    assert_eq!(parents[27], Parents { children: vec![41, 42, 43, 44, 45], sum: 17, value_size: "17-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 7], vec![1, 2, 3, 5, 6]] });
    assert_eq!(parents[28], Parents { children: vec![52, 60, 68], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[29], Parents { children: vec![53, 62], sum: 14, value_size: "14-2".to_string(), combinations: vec![vec![5, 9], vec![6, 8]] });
    assert_eq!(parents[30], Parents { children: vec![46, 47, 48], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[31], Parents { children: vec![49, 50], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[32], Parents { children: vec![58, 67], sum: 5, value_size: "5-2".to_string(), combinations: vec![vec![1, 4], vec![2, 3]] });
    assert_eq!(parents[33], Parents { children: vec![51, 52], sum: 13, value_size: "13-2".to_string(), combinations: vec![vec![4, 9], vec![5, 8], vec![6, 7]] });
    assert_eq!(parents[34], Parents { children: vec![61, 69, 75, 85], sum: 13, value_size: "13-4".to_string(), combinations: vec![vec![1, 2, 3, 7], vec![1, 2, 4, 6], vec![1, 3, 4, 5]] });
    assert_eq!(parents[35], Parents { children: vec![53, 54, 55], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[36], Parents { children: vec![64, 71, 79], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[37], Parents { children: vec![56, 57], sum: 9, value_size: "9-2".to_string(), combinations: vec![vec![1, 8], vec![2, 7], vec![3, 6], vec![4, 5]] });
    assert_eq!(parents[38], Parents { children: vec![66, 74, 82, 88, 97, 107, 116], sum: 41, value_size: "41-7".to_string(), combinations: vec![vec![2, 4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[39], Parents { children: vec![58, 59, 60, 61, 62], sum: 15, value_size: "15-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 5]] });
    assert_eq!(parents[40], Parents { children: vec![63, 64], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[41], Parents { children: vec![72, 80], sum: 5, value_size: "5-2".to_string(), combinations: vec![vec![1, 4], vec![2, 3]] });
    assert_eq!(parents[42], Parents { children: vec![65, 66, 67], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[43], Parents { children: vec![68, 69], sum: 10, value_size: "10-2".to_string(), combinations: vec![vec![1, 9], vec![2, 8], vec![3, 7], vec![4, 6]] });
    assert_eq!(parents[44], Parents { children: vec![76, 86, 92], sum: 22, value_size: "22-3".to_string(), combinations: vec![vec![5, 8, 9], vec![6, 7, 9]] });
    assert_eq!(parents[45], Parents { children: vec![77, 87, 93, 102, 112, 120], sum: 21, value_size: "21-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6]] });
    assert_eq!(parents[46], Parents { children: vec![70, 71], sum: 13, value_size: "13-2".to_string(), combinations: vec![vec![4, 9], vec![5, 8], vec![6, 7]] });
    assert_eq!(parents[47], Parents { children: vec![72, 73, 74], sum: 6, value_size: "6-3".to_string(), combinations: vec![vec![1, 2, 3]] });
    assert_eq!(parents[48], Parents { children: vec![83, 89, 98, 108, 117], sum: 17, value_size: "17-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 7], vec![1, 2, 3, 5, 6]] });
    assert_eq!(parents[49], Parents { children: vec![84, 91, 100], sum: 19, value_size: "19-3".to_string(), combinations: vec![vec![2, 8, 9], vec![3, 7, 9], vec![4, 6, 9], vec![4, 7, 8], vec![5, 6, 8]] });
    assert_eq!(parents[50], Parents { children: vec![75, 76, 77, 78, 79], sum: 23, value_size: "23-5".to_string(), combinations: vec![vec![1, 2, 3, 8, 9], vec![1, 2, 4, 7, 9], vec![1, 2, 5, 6, 9], vec![1, 2, 5, 7, 8], vec![1, 3, 4, 6, 9], vec![1, 3, 4, 7, 8], vec![1, 3, 5, 6, 8], vec![1, 4, 5, 6, 7], vec![2, 3, 4, 5, 9], vec![2, 3, 4, 6, 8], vec![2, 3, 5, 6, 7]] });
    assert_eq!(parents[51], Parents { children: vec![80, 81, 82, 83], sum: 10, value_size: "10-4".to_string(), combinations: vec![vec![1, 2, 3, 4]] });
    assert_eq!(parents[52], Parents { children: vec![90, 99, 109], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[53], Parents { children: vec![84, 85, 86, 87], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[54], Parents { children: vec![94, 103, 113], sum: 8, value_size: "8-3".to_string(), combinations: vec![vec![1, 2, 5], vec![1, 3, 4]] });
    assert_eq!(parents[55], Parents { children: vec![95, 104], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[56], Parents { children: vec![96, 106, 115], sum: 8, value_size: "8-3".to_string(), combinations: vec![vec![1, 2, 5], vec![1, 3, 4]] });
    assert_eq!(parents[57], Parents { children: vec![88, 89, 90, 91], sum: 29, value_size: "29-4".to_string(), combinations: vec![vec![5, 7, 8, 9]] });
    assert_eq!(parents[58], Parents { children: vec![101, 110, 118], sum: 22, value_size: "22-3".to_string(), combinations: vec![vec![5, 8, 9], vec![6, 7, 9]] });
    assert_eq!(parents[59], Parents { children: vec![92, 93, 94, 95], sum: 15, value_size: "15-4".to_string(), combinations: vec![vec![1, 2, 3, 9], vec![1, 2, 4, 8], vec![1, 2, 5, 7], vec![1, 3, 4, 7], vec![1, 3, 5, 6], vec![2, 3, 4, 6]] });
    assert_eq!(parents[60], Parents { children: vec![105, 114], sum: 6, value_size: "6-2".to_string(), combinations: vec![vec![1, 5], vec![2, 4]] });
    assert_eq!(parents[61], Parents { children: vec![96, 97, 98, 99, 100, 101], sum: 36, value_size: "36-6".to_string(), combinations: vec![vec![1, 5, 6, 7, 8, 9], vec![2, 4, 6, 7, 8, 9], vec![3, 4, 5, 7, 8, 9]] });
    assert_eq!(parents[62], Parents { children: vec![111, 119], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[63], Parents { children: vec![102, 103, 104], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[64], Parents { children: vec![105, 106, 107, 108, 109], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[65], Parents { children: vec![110, 111, 112, 113], sum: 27, value_size: "27-4".to_string(), combinations: vec![vec![3, 7, 8, 9], vec![4, 6, 8, 9], vec![5, 6, 7, 9]] });
    assert_eq!(parents[66], Parents { children: vec![114, 115, 116, 117], sum: 15, value_size: "15-4".to_string(), combinations: vec![vec![1, 2, 3, 9], vec![1, 2, 4, 8], vec![1, 2, 5, 7], vec![1, 3, 4, 7], vec![1, 3, 5, 6], vec![2, 3, 4, 6]] });
    assert_eq!(parents[67], Parents { children: vec![118, 119, 120], sum: 19, value_size: "19-3".to_string(), combinations: vec![vec![2, 8, 9], vec![3, 7, 9], vec![4, 6, 9], vec![4, 7, 8], vec![5, 6, 8]] });
   
    assert_eq!(children[0], Children { parents: (0, 8), siblings: vec![1, 2, 8, 18, 27, 33, 43], value: 0, possible_values: vec![5, 6, 7, 8] });
    assert_eq!(children[1], Children { parents: (1, 8), siblings: vec![0, 2, 9], value: 0, possible_values: vec![5, 6, 8, 9] });
    assert_eq!(children[2], Children { parents: (2, 8), siblings: vec![0, 1, 10, 19], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[3], Children { parents: (3, 10), siblings: vec![4, 5, 6, 12, 22, 31, 37], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[4], Children { parents: (4, 10), siblings: vec![3, 5, 6, 13, 23, 32, 38, 46, 54], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 8] });
    assert_eq!(children[5], Children { parents: (5, 10), siblings: vec![3, 4, 6, 14, 24], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[6], Children { parents: (6, 10), siblings: vec![3, 4, 5, 15], value: 0, possible_values: vec![1, 2, 4, 5] });
    assert_eq!(children[7], Children { parents: (7, 12), siblings: vec![8, 9, 10, 17, 26], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[8], Children { parents: (0, 12), siblings: vec![0, 7, 9, 10, 18, 27, 33, 43], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[9], Children { parents: (1, 12), siblings: vec![1, 7, 8, 10], value: 0, possible_values: vec![5, 6, 8, 9] });
    assert_eq!(children[10], Children { parents: (2, 12), siblings: vec![2, 7, 8, 9, 19], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[11], Children { parents: (9, 14), siblings: vec![12, 13, 14, 15, 21, 30], value: 0, possible_values: vec![3, 4, 6] });
    assert_eq!(children[12], Children { parents: (3, 14), siblings: vec![3, 11, 13, 14, 15, 22, 31, 37], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[13], Children { parents: (4, 14), siblings: vec![4, 11, 12, 14, 15, 23, 32, 38, 46, 54], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[14], Children { parents: (5, 14), siblings: vec![5, 11, 12, 13, 15, 24], value: 0, possible_values: vec![6] });
    assert_eq!(children[15], Children { parents: (6, 14), siblings: vec![6, 11, 12, 13, 14], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[16], Children { parents: (11, 15), siblings: vec![17, 18, 25], value: 0, possible_values: vec![6] });
    assert_eq!(children[17], Children { parents: (7, 15), siblings: vec![7, 16, 18, 26], value: 0, possible_values: vec![2, 3, 4, 5, 6] });
    assert_eq!(children[18], Children { parents: (0, 15), siblings: vec![0, 8, 16, 17, 27, 33, 43], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[19], Children { parents: (2, 17), siblings: vec![2, 10, 20, 21, 22, 23, 24], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[20], Children { parents: (13, 17), siblings: vec![19, 21, 22, 23, 24, 29, 36], value: 0, possible_values: vec![3, 5, 6, 7, 8] });
    assert_eq!(children[21], Children { parents: (9, 17), siblings: vec![11, 19, 20, 22, 23, 24, 30], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[22], Children { parents: (3, 17), siblings: vec![3, 12, 19, 20, 21, 23, 24, 31, 37], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[23], Children { parents: (4, 17), siblings: vec![4, 13, 19, 20, 21, 22, 24, 32, 38, 46, 54], value: 0, possible_values: vec![3, 5, 6, 8] });
    assert_eq!(children[24], Children { parents: (5, 17), siblings: vec![5, 14, 19, 20, 21, 22, 23], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[25], Children { parents: (11, 18), siblings: vec![16, 26, 27, 28], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[26], Children { parents: (7, 18), siblings: vec![7, 17, 25, 27, 28], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[27], Children { parents: (0, 18), siblings: vec![0, 8, 18, 25, 26, 28, 33, 43], value: 0, possible_values: vec![5, 7, 8] });
    assert_eq!(children[28], Children { parents: (16, 18), siblings: vec![25, 26, 27, 34, 44], value: 0, possible_values: vec![5] });
    assert_eq!(children[29], Children { parents: (13, 20), siblings: vec![20, 30, 31, 32, 36], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[30], Children { parents: (9, 20), siblings: vec![11, 21, 29, 31, 32], value: 0, possible_values: vec![3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[31], Children { parents: (3, 20), siblings: vec![3, 12, 22, 29, 30, 32, 37], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[32], Children { parents: (4, 20), siblings: vec![4, 13, 23, 29, 30, 31, 38, 46, 54], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 8] });
    assert_eq!(children[33], Children { parents: (0, 25), siblings: vec![0, 8, 18, 27, 34, 35, 36, 43], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[34], Children { parents: (16, 25), siblings: vec![28, 33, 35, 36, 44], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[35], Children { parents: (19, 25), siblings: vec![33, 34, 36, 45, 51, 59], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[36], Children { parents: (13, 25), siblings: vec![20, 29, 33, 34, 35], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[37], Children { parents: (3, 26), siblings: vec![3, 12, 22, 31, 38, 39, 40], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[38], Children { parents: (4, 26), siblings: vec![4, 13, 23, 32, 37, 39, 40, 46, 54], value: 0, possible_values: vec![4, 5, 6, 8] });
    assert_eq!(children[39], Children { parents: (21, 26), siblings: vec![37, 38, 40, 47, 55, 63, 70, 78], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[40], Children { parents: (22, 26), siblings: vec![37, 38, 39, 48], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[41], Children { parents: (23, 27), siblings: vec![42, 43, 44, 45, 49, 56], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[42], Children { parents: (24, 27), siblings: vec![41, 43, 44, 45, 50, 57, 65, 73, 81], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[43], Children { parents: (0, 27), siblings: vec![0, 8, 18, 27, 33, 41, 42, 44, 45], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[44], Children { parents: (16, 27), siblings: vec![28, 34, 41, 42, 43, 45], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[45], Children { parents: (19, 27), siblings: vec![35, 41, 42, 43, 44, 51, 59], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[46], Children { parents: (4, 30), siblings: vec![4, 13, 23, 32, 38, 47, 48, 54], value: 0, possible_values: vec![8] });
    assert_eq!(children[47], Children { parents: (21, 30), siblings: vec![39, 46, 48, 55, 63, 70, 78], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[48], Children { parents: (22, 30), siblings: vec![40, 46, 47], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[49], Children { parents: (23, 31), siblings: vec![41, 50, 56], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[50], Children { parents: (24, 31), siblings: vec![42, 49, 57, 65, 73, 81], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[51], Children { parents: (19, 33), siblings: vec![35, 45, 52, 59], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[52], Children { parents: (28, 33), siblings: vec![51, 60, 68], value: 0, possible_values: vec![4, 5, 6, 7, 8] });
    assert_eq!(children[53], Children { parents: (29, 35), siblings: vec![54, 55, 62], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[54], Children { parents: (4, 35), siblings: vec![4, 13, 23, 32, 38, 46, 53, 55], value: 0, possible_values: vec![6, 8] });
    assert_eq!(children[55], Children { parents: (21, 35), siblings: vec![39, 47, 53, 54, 63, 70, 78], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[56], Children { parents: (23, 37), siblings: vec![41, 49, 57], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[57], Children { parents: (24, 37), siblings: vec![42, 50, 56, 65, 73, 81], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[58], Children { parents: (32, 39), siblings: vec![59, 60, 61, 62, 67], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[59], Children { parents: (19, 39), siblings: vec![35, 45, 51, 58, 60, 61, 62], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[60], Children { parents: (28, 39), siblings: vec![52, 58, 59, 61, 62, 68], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[61], Children { parents: (34, 39), siblings: vec![58, 59, 60, 62, 69, 75, 85], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[62], Children { parents: (29, 39), siblings: vec![53, 58, 59, 60, 61], value: 0, possible_values: vec![5] });
    assert_eq!(children[63], Children { parents: (21, 40), siblings: vec![39, 47, 55, 64, 70, 78], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[64], Children { parents: (36, 40), siblings: vec![63, 71, 79], value: 0, possible_values: vec![9] });
    assert_eq!(children[65], Children { parents: (24, 42), siblings: vec![42, 50, 57, 66, 67, 73, 81], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[66], Children { parents: (38, 42), siblings: vec![65, 67, 74, 82, 88, 97, 107, 116], value: 0, possible_values: vec![2, 4, 5, 6, 7] });
    assert_eq!(children[67], Children { parents: (32, 42), siblings: vec![58, 65, 66], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[68], Children { parents: (28, 43), siblings: vec![52, 60, 69], value: 0, possible_values: vec![1, 2, 3, 4, 6, 7, 8] });
    assert_eq!(children[69], Children { parents: (34, 43), siblings: vec![61, 68, 75, 85], value: 0, possible_values: vec![1, 2, 3, 4, 6, 7] });
    assert_eq!(children[70], Children { parents: (21, 46), siblings: vec![39, 47, 55, 63, 71, 78], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[71], Children { parents: (36, 46), siblings: vec![64, 70, 79], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[72], Children { parents: (41, 47), siblings: vec![73, 74, 80], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[73], Children { parents: (24, 47), siblings: vec![42, 50, 57, 65, 72, 74, 81], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[74], Children { parents: (38, 47), siblings: vec![66, 72, 73, 82, 88, 97, 107, 116], value: 0, possible_values: vec![2] });
    assert_eq!(children[75], Children { parents: (34, 50), siblings: vec![61, 69, 76, 77, 78, 79, 85], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[76], Children { parents: (44, 50), siblings: vec![75, 77, 78, 79, 86, 92], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[77], Children { parents: (45, 50), siblings: vec![75, 76, 78, 79, 87, 93, 102, 112, 120], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[78], Children { parents: (21, 50), siblings: vec![39, 47, 55, 63, 70, 75, 76, 77, 79], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[79], Children { parents: (36, 50), siblings: vec![64, 71, 75, 76, 77, 78], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[80], Children { parents: (41, 51), siblings: vec![72, 81, 82, 83], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[81], Children { parents: (24, 51), siblings: vec![42, 50, 57, 65, 73, 80, 82, 83], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[82], Children { parents: (38, 51), siblings: vec![66, 74, 80, 81, 83, 88, 97, 107, 116], value: 0, possible_values: vec![2, 4] });
    assert_eq!(children[83], Children { parents: (48, 51), siblings: vec![80, 81, 82, 89, 98, 108, 117], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[84], Children { parents: (49, 53), siblings: vec![85, 86, 87, 91, 100], value: 0, possible_values: vec![2, 3, 5] });
    assert_eq!(children[85], Children { parents: (34, 53), siblings: vec![61, 69, 75, 84, 86, 87], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[86], Children { parents: (44, 53), siblings: vec![76, 84, 85, 87, 92], value: 0, possible_values: vec![5] });
    assert_eq!(children[87], Children { parents: (45, 53), siblings: vec![77, 84, 85, 86, 93, 102, 112, 120], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[88], Children { parents: (38, 57), siblings: vec![66, 74, 82, 89, 90, 91, 97, 107, 116], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[89], Children { parents: (48, 57), siblings: vec![83, 88, 90, 91, 98, 108, 117], value: 0, possible_values: vec![5, 7] });
    assert_eq!(children[90], Children { parents: (52, 57), siblings: vec![88, 89, 91, 99, 109], value: 0, possible_values: vec![5, 7] });
    assert_eq!(children[91], Children { parents: (49, 57), siblings: vec![84, 88, 89, 90, 100], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[92], Children { parents: (44, 59), siblings: vec![76, 86, 93, 94, 95], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[93], Children { parents: (45, 59), siblings: vec![77, 87, 92, 94, 95, 102, 112, 120], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[94], Children { parents: (54, 59), siblings: vec![92, 93, 95, 103, 113], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[95], Children { parents: (55, 59), siblings: vec![92, 93, 94, 104], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[96], Children { parents: (56, 61), siblings: vec![97, 98, 99, 100, 101, 106, 115], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[97], Children { parents: (38, 61), siblings: vec![66, 74, 82, 88, 96, 98, 99, 100, 101, 107, 116], value: 0, possible_values: vec![2, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[98], Children { parents: (48, 61), siblings: vec![83, 89, 96, 97, 99, 100, 101, 108, 117], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[99], Children { parents: (52, 61), siblings: vec![90, 96, 97, 98, 100, 101, 109], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[100], Children { parents: (49, 61), siblings: vec![84, 91, 96, 97, 98, 99, 101], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[101], Children { parents: (58, 61), siblings: vec![96, 97, 98, 99, 100, 110, 118], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[102], Children { parents: (45, 63), siblings: vec![77, 87, 93, 103, 104, 112, 120], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[103], Children { parents: (54, 63), siblings: vec![94, 102, 104, 113], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[104], Children { parents: (55, 63), siblings: vec![95, 102, 103], value: 0, possible_values: vec![1] });
    assert_eq!(children[105], Children { parents: (60, 64), siblings: vec![106, 107, 108, 109, 114], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[106], Children { parents: (56, 64), siblings: vec![96, 105, 107, 108, 109, 115], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[107], Children { parents: (38, 64), siblings: vec![66, 74, 82, 88, 97, 105, 106, 108, 109, 116], value: 0, possible_values: vec![2, 4, 6] });
    assert_eq!(children[108], Children { parents: (48, 64), siblings: vec![83, 89, 98, 105, 106, 107, 109, 117], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[109], Children { parents: (52, 64), siblings: vec![90, 99, 105, 106, 107, 108], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[110], Children { parents: (58, 65), siblings: vec![101, 111, 112, 113, 118], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[111], Children { parents: (62, 65), siblings: vec![110, 112, 113, 119], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[112], Children { parents: (45, 65), siblings: vec![77, 87, 93, 102, 110, 111, 113, 120], value: 0, possible_values: vec![3, 4, 5, 6] });
    assert_eq!(children[113], Children { parents: (54, 65), siblings: vec![94, 103, 110, 111, 112], value: 0, possible_values: vec![3, 4, 5] });
    assert_eq!(children[114], Children { parents: (60, 66), siblings: vec![105, 115, 116, 117], value: 0, possible_values: vec![1, 2, 4, 5] });
    assert_eq!(children[115], Children { parents: (56, 66), siblings: vec![96, 106, 114, 116, 117], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[116], Children { parents: (38, 66), siblings: vec![66, 74, 82, 88, 97, 107, 114, 115, 117], value: 0, possible_values: vec![2, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[117], Children { parents: (48, 66), siblings: vec![83, 89, 98, 108, 114, 115, 116], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[118], Children { parents: (58, 67), siblings: vec![101, 110, 119, 120], value: 0, possible_values: vec![5, 6, 7, 8, 9] });
    assert_eq!(children[119], Children { parents: (62, 67), siblings: vec![111, 118, 120], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[120], Children { parents: (45, 67), siblings: vec![77, 87, 93, 102, 112, 118, 119], value: 0, possible_values: vec![2, 3, 4, 5, 6] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_5() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "puzzles\\Kakuro_input5.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    let parents = parents_and_children.0;
    let children = parents_and_children.1;

    assert_eq!(parents.len(), 106);
    assert_eq!(children.len(), 184);

    assert_eq!(parents[0], Parents { children: vec![0, 8, 20, 30, 39], sum: 15, value_size: "15-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 5]] });
    assert_eq!(parents[1], Parents { children: vec![1, 9, 21], sum: 8, value_size: "8-3".to_string(), combinations: vec![vec![1, 2, 5], vec![1, 3, 4]] });
    assert_eq!(parents[2], Parents { children: vec![2, 11], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[3], Parents { children: vec![3, 12], sum: 9, value_size: "9-2".to_string(), combinations: vec![vec![1, 8], vec![2, 7], vec![3, 6], vec![4, 5]] });
    assert_eq!(parents[4], Parents { children: vec![4, 14, 25, 35], sum: 29, value_size: "29-4".to_string(), combinations: vec![vec![5, 7, 8, 9]] });
    assert_eq!(parents[5], Parents { children: vec![5, 15], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[6], Parents { children: vec![6, 16, 26], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents[7], Parents { children: vec![7, 19, 29], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[8], Parents { children: vec![0, 1], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[9], Parents { children: vec![10, 22], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[10], Parents { children: vec![2, 3], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[11], Parents { children: vec![13, 23, 33, 44, 52], sum: 25, value_size: "25-5".to_string(), combinations: vec![vec![1, 2, 5, 8, 9], vec![1, 2, 6, 7, 9], vec![1, 3, 4, 8, 9], vec![1, 3, 5, 7, 9], vec![1, 3, 6, 7, 8], vec![1, 4, 5, 6, 9], vec![1, 4, 5, 7, 8], vec![2, 3, 4, 7, 9], vec![2, 3, 5, 6, 9], vec![2, 3, 5, 7, 8], vec![2, 4, 5, 6, 8], vec![3, 4, 5, 6, 7]] });
    assert_eq!(parents[12], Parents { children: vec![4, 5, 6], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[13], Parents { children: vec![17, 27, 37, 48, 56, 65, 76], sum: 28, value_size: "28-7".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 7]] });
    assert_eq!(parents[14], Parents { children: vec![18, 28, 38], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[15], Parents { children: vec![7, 8, 9, 10, 11, 12, 13], sum: 29, value_size: "29-7".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 8]] });
    assert_eq!(parents[16], Parents { children: vec![24, 34, 45, 53], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[17], Parents { children: vec![14, 15, 16, 17, 18], sum: 34, value_size: "34-5".to_string(), combinations: vec![vec![4, 6, 7, 8, 9]] });
    assert_eq!(parents[18], Parents { children: vec![19, 20, 21, 22], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[19], Parents { children: vec![31, 42, 51, 61], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[20], Parents { children: vec![32, 43], sum: 8, value_size: "8-2".to_string(), combinations: vec![vec![1, 7], vec![2, 6], vec![3, 5]] });
    assert_eq!(parents[21], Parents { children: vec![23, 24, 25], sum: 19, value_size: "19-3".to_string(), combinations: vec![vec![2, 8, 9], vec![3, 7, 9], vec![4, 6, 9], vec![4, 7, 8], vec![5, 6, 8]] });
    assert_eq!(parents[22], Parents { children: vec![36, 46], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[23], Parents { children: vec![26, 27, 28], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[24], Parents { children: vec![29, 30], sum: 12, value_size: "12-2".to_string(), combinations: vec![vec![3, 9], vec![4, 8], vec![5, 7]] });
    assert_eq!(parents[25], Parents { children: vec![40, 49], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[26], Parents { children: vec![41, 50, 60, 70, 80, 89, 98, 109, 119], sum: 45, value_size: "45-9".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[27], Parents { children: vec![31, 32, 33, 34, 35, 36], sum: 21, value_size: "21-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6]] });
    assert_eq!(parents[28], Parents { children: vec![47, 55], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[29], Parents { children: vec![37, 38], sum: 10, value_size: "10-2".to_string(), combinations: vec![vec![1, 9], vec![2, 8], vec![3, 7], vec![4, 6]] });
    assert_eq!(parents[30], Parents { children: vec![39, 40, 41, 42, 43, 44, 45], sum: 42, value_size: "42-7".to_string(), combinations: vec![vec![3, 4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[31], Parents { children: vec![54, 63], sum: 7, value_size: "7-2".to_string(), combinations: vec![vec![1, 6], vec![2, 5], vec![3, 4]] });
    assert_eq!(parents[32], Parents { children: vec![46, 47, 48], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[33], Parents { children: vec![57, 66], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[34], Parents { children: vec![58, 67, 77], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[35], Parents { children: vec![59, 68, 78, 87], sum: 29, value_size: "29-4".to_string(), combinations: vec![vec![5, 7, 8, 9]] });
    assert_eq!(parents[36], Parents { children: vec![49, 50, 51], sum: 17, value_size: "17-3".to_string(), combinations: vec![vec![1, 7, 9], vec![2, 6, 9], vec![2, 7, 8], vec![3, 5, 9], vec![3, 6, 8], vec![4, 5, 8], vec![4, 6, 7]] });
    assert_eq!(parents[37], Parents { children: vec![62, 71, 82, 91, 99, 110], sum: 23, value_size: "23-6".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 8], vec![1, 2, 3, 4, 6, 7]] });
    assert_eq!(parents[38], Parents { children: vec![52, 53, 54], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[39], Parents { children: vec![64, 74, 85, 94, 103, 113, 123, 133, 142], sum: 45, value_size: "45-9".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[40], Parents { children: vec![55, 56, 57], sum: 6, value_size: "6-3".to_string(), combinations: vec![vec![1, 2, 3]] });
    assert_eq!(parents[41], Parents { children: vec![58, 59], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[42], Parents { children: vec![69, 79, 88, 97, 108], sum: 23, value_size: "23-5".to_string(), combinations: vec![vec![1, 2, 3, 8, 9], vec![1, 2, 4, 7, 9], vec![1, 2, 5, 6, 9], vec![1, 2, 5, 7, 8], vec![1, 3, 4, 6, 9], vec![1, 3, 4, 7, 8], vec![1, 3, 5, 6, 8], vec![1, 4, 5, 6, 7], vec![2, 3, 4, 5, 9], vec![2, 3, 4, 6, 8], vec![2, 3, 5, 6, 7]] });
    assert_eq!(parents[43], Parents { children: vec![60, 61, 62], sum: 8, value_size: "8-3".to_string(), combinations: vec![vec![1, 2, 5], vec![1, 3, 4]] });
    assert_eq!(parents[44], Parents { children: vec![72, 83], sum: 13, value_size: "13-2".to_string(), combinations: vec![vec![4, 9], vec![5, 8], vec![6, 7]] });
    assert_eq!(parents[45], Parents { children: vec![73, 84, 92, 101, 112, 121], sum: 38, value_size: "38-6".to_string(), combinations: vec![vec![3, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[46], Parents { children: vec![63, 64], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[47], Parents { children: vec![75, 86, 95, 104, 114], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[48], Parents { children: vec![65, 66], sum: 6, value_size: "6-2".to_string(), combinations: vec![vec![1, 5], vec![2, 4]] });
    assert_eq!(parents[49], Parents { children: vec![67, 68, 69, 70], sum: 30, value_size: "30-4".to_string(), combinations: vec![vec![6, 7, 8, 9]] });
    assert_eq!(parents[50], Parents { children: vec![81, 90], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[51], Parents { children: vec![71, 72, 73], sum: 13, value_size: "13-3".to_string(), combinations: vec![vec![1, 3, 9], vec![1, 4, 8], vec![1, 5, 7], vec![2, 3, 8], vec![2, 4, 7], vec![2, 5, 6], vec![3, 4, 6]] });
    assert_eq!(parents[52], Parents { children: vec![74, 75, 76], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[53], Parents { children: vec![77, 78, 79, 80, 81, 82, 83, 84], sum: 36, value_size: "36-8".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 7, 8]] });
    assert_eq!(parents[54], Parents { children: vec![93, 102], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[55], Parents { children: vec![85, 86], sum: 11, value_size: "11-2".to_string(), combinations: vec![vec![2, 9], vec![3, 8], vec![4, 7], vec![5, 6]] });
    assert_eq!(parents[56], Parents { children: vec![96, 105, 115, 124], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[57], Parents { children: vec![87, 88, 89, 90, 91], sum: 15, value_size: "15-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 5]] });
    assert_eq!(parents[58], Parents { children: vec![100, 111], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[59], Parents { children: vec![92, 93, 94, 95, 96], sum: 15, value_size: "15-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 5]] });
    assert_eq!(parents[60], Parents { children: vec![106, 116, 125], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[61], Parents { children: vec![107, 118, 127, 135, 146, 156, 166], sum: 32, value_size: "32-7".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 8, 9], vec![1, 2, 3, 4, 6, 7, 9], vec![1, 2, 3, 5, 6, 7, 8]] });
    assert_eq!(parents[62], Parents { children: vec![97, 98], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[63], Parents { children: vec![99, 100, 101, 102, 103, 104, 105, 106], sum: 44, value_size: "44-8".to_string(), combinations: vec![vec![2, 3, 4, 5, 6, 7, 8, 9]] });
    assert_eq!(parents[64], Parents { children: vec![117, 126], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[65], Parents { children: vec![107, 108, 109], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[66], Parents { children: vec![120, 129], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[67], Parents { children: vec![110, 111, 112], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[68], Parents { children: vec![122, 132, 141, 152], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[69], Parents { children: vec![113, 114, 115, 116], sum: 10, value_size: "10-4".to_string(), combinations: vec![vec![1, 2, 3, 4]] });
    assert_eq!(parents[70], Parents { children: vec![117, 118], sum: 3, value_size: "3-2".to_string(), combinations: vec![vec![1, 2]] });
    assert_eq!(parents[71], Parents { children: vec![128, 136], sum: 13, value_size: "13-2".to_string(), combinations: vec![vec![4, 9], vec![5, 8], vec![6, 7]] });
    assert_eq!(parents[72], Parents { children: vec![119, 120], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[73], Parents { children: vec![130, 138, 149, 159], sum: 12, value_size: "12-4".to_string(), combinations: vec![vec![1, 2, 3, 6], vec![1, 2, 4, 5]] });
    assert_eq!(parents[74], Parents { children: vec![131, 139, 150, 160, 170], sum: 15, value_size: "15-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 5]] });
    assert_eq!(parents[75], Parents { children: vec![121, 122, 123], sum: 12, value_size: "12-3".to_string(), combinations: vec![vec![1, 2, 9], vec![1, 3, 8], vec![1, 4, 7], vec![1, 5, 6], vec![2, 3, 7], vec![2, 4, 6], vec![3, 4, 5]] });
    assert_eq!(parents[76], Parents { children: vec![134, 143], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[77], Parents { children: vec![124, 125], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[78], Parents { children: vec![126, 127, 128], sum: 8, value_size: "8-3".to_string(), combinations: vec![vec![1, 2, 5], vec![1, 3, 4]] });
    assert_eq!(parents[79], Parents { children: vec![137, 147], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[80], Parents { children: vec![129, 130, 131], sum: 10, value_size: "10-3".to_string(), combinations: vec![vec![1, 2, 7], vec![1, 3, 6], vec![1, 4, 5], vec![2, 3, 5]] });
    assert_eq!(parents[81], Parents { children: vec![140, 151], sum: 12, value_size: "12-2".to_string(), combinations: vec![vec![3, 9], vec![4, 8], vec![5, 7]] });
    assert_eq!(parents[82], Parents { children: vec![132, 133, 134], sum: 23, value_size: "23-3".to_string(), combinations: vec![vec![6, 8, 9]] });
    assert_eq!(parents[83], Parents { children: vec![144, 153, 163, 175, 183], sum: 20, value_size: "20-5".to_string(), combinations: vec![vec![1, 2, 3, 5, 9], vec![1, 2, 3, 6, 8], vec![1, 2, 4, 5, 8], vec![1, 2, 4, 6, 7], vec![1, 3, 4, 5, 7], vec![2, 3, 4, 5, 6]] });
    assert_eq!(parents[84], Parents { children: vec![145, 155, 165], sum: 15, value_size: "15-3".to_string(), combinations: vec![vec![1, 5, 9], vec![1, 6, 8], vec![2, 4, 9], vec![2, 5, 8], vec![2, 6, 7], vec![3, 4, 8], vec![3, 5, 7], vec![4, 5, 6]] });
    assert_eq!(parents[85], Parents { children: vec![135, 136, 137], sum: 24, value_size: "24-3".to_string(), combinations: vec![vec![7, 8, 9]] });
    assert_eq!(parents[86], Parents { children: vec![148, 158, 169, 179], sum: 11, value_size: "11-4".to_string(), combinations: vec![vec![1, 2, 3, 5]] });
    assert_eq!(parents[87], Parents { children: vec![138, 139, 140, 141, 142, 143, 144], sum: 28, value_size: "28-7".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 7]] });
    assert_eq!(parents[88], Parents { children: vec![154, 164, 176], sum: 6, value_size: "6-3".to_string(), combinations: vec![vec![1, 2, 3]] });
    assert_eq!(parents[89], Parents { children: vec![145, 146], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[90], Parents { children: vec![157, 167, 177], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[91], Parents { children: vec![147, 148, 149, 150, 151, 152], sum: 28, value_size: "28-6".to_string(), combinations: vec![vec![1, 2, 3, 5, 8, 9], vec![1, 2, 3, 6, 7, 9], vec![1, 2, 4, 5, 7, 9], vec![1, 2, 4, 6, 7, 8], vec![1, 3, 4, 5, 6, 9], vec![1, 3, 4, 5, 7, 8], vec![2, 3, 4, 5, 6, 8]] });
    assert_eq!(parents[92], Parents { children: vec![161, 173], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[93], Parents { children: vec![162, 174, 182], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[94], Parents { children: vec![153, 154], sum: 7, value_size: "7-2".to_string(), combinations: vec![vec![1, 6], vec![2, 5], vec![3, 4]] });
    assert_eq!(parents[95], Parents { children: vec![155, 156, 157], sum: 8, value_size: "8-3".to_string(), combinations: vec![vec![1, 2, 5], vec![1, 3, 4]] });
    assert_eq!(parents[96], Parents { children: vec![168, 178], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    assert_eq!(parents[97], Parents { children: vec![158, 159, 160], sum: 7, value_size: "7-3".to_string(), combinations: vec![vec![1, 2, 4]] });
    assert_eq!(parents[98], Parents { children: vec![171, 180], sum: 16, value_size: "16-2".to_string(), combinations: vec![vec![7, 9]] });
    assert_eq!(parents[99], Parents { children: vec![172, 181], sum: 9, value_size: "9-2".to_string(), combinations: vec![vec![1, 8], vec![2, 7], vec![3, 6], vec![4, 5]] });
    assert_eq!(parents[100], Parents { children: vec![161, 162, 163, 164], sum: 10, value_size: "10-4".to_string(), combinations: vec![vec![1, 2, 3, 4]] });
    assert_eq!(parents[101], Parents { children: vec![165, 166, 167, 168, 169], sum: 16, value_size: "16-5".to_string(), combinations: vec![vec![1, 2, 3, 4, 6]] });
    assert_eq!(parents[102], Parents { children: vec![170, 171, 172, 173, 174, 175, 176], sum: 28, value_size: "28-7".to_string(), combinations: vec![vec![1, 2, 3, 4, 5, 6, 7]] });
    assert_eq!(parents[103], Parents { children: vec![177, 178, 179], sum: 9, value_size: "9-3".to_string(), combinations: vec![vec![1, 2, 6], vec![1, 3, 5], vec![2, 3, 4]] });
    assert_eq!(parents[104], Parents { children: vec![180, 181], sum: 17, value_size: "17-2".to_string(), combinations: vec![vec![8, 9]] });
    assert_eq!(parents[105], Parents { children: vec![182, 183], sum: 4, value_size: "4-2".to_string(), combinations: vec![vec![1, 3]] });
    
    assert_eq!(children[0], Children { parents: (0, 8), siblings: vec![1, 8, 20, 30, 39], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[1], Children { parents: (1, 8), siblings: vec![0, 9, 21], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[2], Children { parents: (2, 10), siblings: vec![3, 11], value: 0, possible_values: vec![1] });
    assert_eq!(children[3], Children { parents: (3, 10), siblings: vec![2, 12], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[4], Children { parents: (4, 12), siblings: vec![5, 6, 14, 25, 35], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[5], Children { parents: (5, 12), siblings: vec![4, 6, 15], value: 0, possible_values: vec![9] });
    assert_eq!(children[6], Children { parents: (6, 12), siblings: vec![4, 5, 16, 26], value: 0, possible_values: vec![6, 8] });
    assert_eq!(children[7], Children { parents: (7, 15), siblings: vec![8, 9, 10, 11, 12, 13, 19, 29], value: 0, possible_values: vec![6, 8] });
    assert_eq!(children[8], Children { parents: (0, 15), siblings: vec![0, 7, 9, 10, 11, 12, 13, 20, 30, 39], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[9], Children { parents: (1, 15), siblings: vec![1, 7, 8, 10, 11, 12, 13, 21], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[10], Children { parents: (9, 15), siblings: vec![7, 8, 9, 11, 12, 13, 22], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[11], Children { parents: (2, 15), siblings: vec![2, 7, 8, 9, 10, 12, 13], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[12], Children { parents: (3, 15), siblings: vec![3, 7, 8, 9, 10, 11, 13], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 8] });
    assert_eq!(children[13], Children { parents: (11, 15), siblings: vec![7, 8, 9, 10, 11, 12, 23, 33, 44, 52], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 8] });
    assert_eq!(children[14], Children { parents: (4, 17), siblings: vec![4, 15, 16, 17, 18, 25, 35], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[15], Children { parents: (5, 17), siblings: vec![5, 14, 16, 17, 18], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[16], Children { parents: (6, 17), siblings: vec![6, 14, 15, 17, 18, 26], value: 0, possible_values: vec![4, 6, 7, 8] });
    assert_eq!(children[17], Children { parents: (13, 17), siblings: vec![14, 15, 16, 18, 27, 37, 48, 56, 65, 76], value: 0, possible_values: vec![4, 6, 7] });
    assert_eq!(children[18], Children { parents: (14, 17), siblings: vec![14, 15, 16, 17, 28, 38], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[19], Children { parents: (7, 18), siblings: vec![7, 20, 21, 22, 29], value: 0, possible_values: vec![6] });
    assert_eq!(children[20], Children { parents: (0, 18), siblings: vec![0, 8, 19, 21, 22, 30, 39], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[21], Children { parents: (1, 18), siblings: vec![1, 9, 19, 20, 22], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[22], Children { parents: (9, 18), siblings: vec![10, 19, 20, 21], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[23], Children { parents: (11, 21), siblings: vec![13, 24, 25, 33, 44, 52], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[24], Children { parents: (16, 21), siblings: vec![23, 25, 34, 45, 53], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[25], Children { parents: (4, 21), siblings: vec![4, 14, 23, 24, 35], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[26], Children { parents: (6, 23), siblings: vec![6, 16, 27, 28], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[27], Children { parents: (13, 23), siblings: vec![17, 26, 28, 37, 48, 56, 65, 76], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[28], Children { parents: (14, 23), siblings: vec![18, 26, 27, 38], value: 0, possible_values: vec![7] });
    assert_eq!(children[29], Children { parents: (7, 24), siblings: vec![7, 19, 30], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[30], Children { parents: (0, 24), siblings: vec![0, 8, 20, 29, 39], value: 0, possible_values: vec![3, 4, 5] });
    assert_eq!(children[31], Children { parents: (19, 27), siblings: vec![32, 33, 34, 35, 36, 42, 51, 61], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[32], Children { parents: (20, 27), siblings: vec![31, 33, 34, 35, 36, 43], value: 0, possible_values: vec![1, 2, 3, 5, 6] });
    assert_eq!(children[33], Children { parents: (11, 27), siblings: vec![13, 23, 31, 32, 34, 35, 36, 44, 52], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[34], Children { parents: (16, 27), siblings: vec![24, 31, 32, 33, 35, 36, 45, 53], value: 0, possible_values: vec![6] });
    assert_eq!(children[35], Children { parents: (4, 27), siblings: vec![4, 14, 25, 31, 32, 33, 34, 36], value: 0, possible_values: vec![5] });
    assert_eq!(children[36], Children { parents: (22, 27), siblings: vec![31, 32, 33, 34, 35, 46], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[37], Children { parents: (13, 29), siblings: vec![17, 27, 38, 48, 56, 65, 76], value: 0, possible_values: vec![1, 2, 3, 4, 6, 7] });
    assert_eq!(children[38], Children { parents: (14, 29), siblings: vec![18, 28, 37], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[39], Children { parents: (0, 30), siblings: vec![0, 8, 20, 30, 40, 41, 42, 43, 44, 45], value: 0, possible_values: vec![3, 4, 5] });
    assert_eq!(children[40], Children { parents: (25, 30), siblings: vec![39, 41, 42, 43, 44, 45, 49], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[41], Children { parents: (26, 30), siblings: vec![39, 40, 42, 43, 44, 45, 50, 60, 70, 80, 89, 98, 109, 119], value: 0, possible_values: vec![3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[42], Children { parents: (19, 30), siblings: vec![31, 39, 40, 41, 43, 44, 45, 51, 61], value: 0, possible_values: vec![3, 4, 5, 6] });
    assert_eq!(children[43], Children { parents: (20, 30), siblings: vec![32, 39, 40, 41, 42, 44, 45], value: 0, possible_values: vec![3, 5, 6, 7] });
    assert_eq!(children[44], Children { parents: (11, 30), siblings: vec![13, 23, 33, 39, 40, 41, 42, 43, 45, 52], value: 0, possible_values: vec![3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[45], Children { parents: (16, 30), siblings: vec![24, 34, 39, 40, 41, 42, 43, 44, 53], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[46], Children { parents: (22, 32), siblings: vec![36, 47, 48], value: 0, possible_values: vec![1] });
    assert_eq!(children[47], Children { parents: (28, 32), siblings: vec![46, 48, 55], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[48], Children { parents: (13, 32), siblings: vec![17, 27, 37, 46, 47, 56, 65, 76], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[49], Children { parents: (25, 36), siblings: vec![40, 50, 51], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[50], Children { parents: (26, 36), siblings: vec![41, 49, 51, 60, 70, 80, 89, 98, 109, 119], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[51], Children { parents: (19, 36), siblings: vec![31, 42, 49, 50, 61], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[52], Children { parents: (11, 38), siblings: vec![13, 23, 33, 44, 53, 54], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[53], Children { parents: (16, 38), siblings: vec![24, 34, 45, 52, 54], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[54], Children { parents: (31, 38), siblings: vec![52, 53, 63], value: 0, possible_values: vec![6] });
    assert_eq!(children[55], Children { parents: (28, 40), siblings: vec![47, 56, 57], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[56], Children { parents: (13, 40), siblings: vec![17, 27, 37, 48, 55, 57, 65, 76], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[57], Children { parents: (33, 40), siblings: vec![55, 56, 66], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[58], Children { parents: (34, 41), siblings: vec![59, 67, 77], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7] });
    assert_eq!(children[59], Children { parents: (35, 41), siblings: vec![58, 68, 78, 87], value: 0, possible_values: vec![5, 7, 8, 9] });
    assert_eq!(children[60], Children { parents: (26, 43), siblings: vec![41, 50, 61, 62, 70, 80, 89, 98, 109, 119], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[61], Children { parents: (19, 43), siblings: vec![31, 42, 51, 60, 62], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[62], Children { parents: (37, 43), siblings: vec![60, 61, 71, 82, 91, 99, 110], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[63], Children { parents: (31, 46), siblings: vec![54, 64], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[64], Children { parents: (39, 46), siblings: vec![63, 74, 85, 94, 103, 113, 123, 133, 142], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[65], Children { parents: (13, 48), siblings: vec![17, 27, 37, 48, 56, 66, 76], value: 0, possible_values: vec![1, 2, 4, 5] });
    assert_eq!(children[66], Children { parents: (33, 48), siblings: vec![57, 65], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[67], Children { parents: (34, 49), siblings: vec![58, 68, 69, 70, 77], value: 0, possible_values: vec![6, 7] });
    assert_eq!(children[68], Children { parents: (35, 49), siblings: vec![59, 67, 69, 70, 78, 87], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[69], Children { parents: (42, 49), siblings: vec![67, 68, 70, 79, 88, 97, 108], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[70], Children { parents: (26, 49), siblings: vec![41, 50, 60, 67, 68, 69, 80, 89, 98, 109, 119], value: 0, possible_values: vec![6, 7, 8, 9] });
    assert_eq!(children[71], Children { parents: (37, 51), siblings: vec![62, 72, 73, 82, 91, 99, 110], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[72], Children { parents: (44, 51), siblings: vec![71, 73, 83], value: 0, possible_values: vec![4, 5, 6, 7, 8, 9] });
    assert_eq!(children[73], Children { parents: (45, 51), siblings: vec![71, 72, 84, 92, 101, 112, 121], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[74], Children { parents: (39, 52), siblings: vec![64, 75, 76, 85, 94, 103, 113, 123, 133, 142], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[75], Children { parents: (47, 52), siblings: vec![74, 76, 86, 95, 104, 114], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[76], Children { parents: (13, 52), siblings: vec![17, 27, 37, 48, 56, 65, 74, 75], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[77], Children { parents: (34, 53), siblings: vec![58, 67, 78, 79, 80, 81, 82, 83, 84], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[78], Children { parents: (35, 53), siblings: vec![59, 68, 77, 79, 80, 81, 82, 83, 84, 87], value: 0, possible_values: vec![5, 7, 8] });
    assert_eq!(children[79], Children { parents: (42, 53), siblings: vec![69, 77, 78, 80, 81, 82, 83, 84, 88, 97, 108], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[80], Children { parents: (26, 53), siblings: vec![41, 50, 60, 70, 77, 78, 79, 81, 82, 83, 84, 89, 98, 109, 119], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[81], Children { parents: (50, 53), siblings: vec![77, 78, 79, 80, 82, 83, 84, 90], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[82], Children { parents: (37, 53), siblings: vec![62, 71, 77, 78, 79, 80, 81, 83, 84, 91, 99, 110], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[83], Children { parents: (44, 53), siblings: vec![72, 77, 78, 79, 80, 81, 82, 84], value: 0, possible_values: vec![4, 5, 6, 7, 8] });
    assert_eq!(children[84], Children { parents: (45, 53), siblings: vec![73, 77, 78, 79, 80, 81, 82, 83, 92, 101, 112, 121], value: 0, possible_values: vec![3, 5, 6, 7, 8] });
    assert_eq!(children[85], Children { parents: (39, 55), siblings: vec![64, 74, 86, 94, 103, 113, 123, 133, 142], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[86], Children { parents: (47, 55), siblings: vec![75, 85, 95, 104, 114], value: 0, possible_values: vec![2, 3, 4, 6] });
    assert_eq!(children[87], Children { parents: (35, 57), siblings: vec![59, 68, 78, 88, 89, 90, 91], value: 0, possible_values: vec![5] });
    assert_eq!(children[88], Children { parents: (42, 57), siblings: vec![69, 79, 87, 89, 90, 91, 97, 108], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[89], Children { parents: (26, 57), siblings: vec![41, 50, 60, 70, 80, 87, 88, 90, 91, 98, 109, 119], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[90], Children { parents: (50, 57), siblings: vec![81, 87, 88, 89, 91], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[91], Children { parents: (37, 57), siblings: vec![62, 71, 82, 87, 88, 89, 90, 99, 110], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[92], Children { parents: (45, 59), siblings: vec![73, 84, 93, 94, 95, 96, 101, 112, 121], value: 0, possible_values: vec![3, 5] });
    assert_eq!(children[93], Children { parents: (54, 59), siblings: vec![92, 94, 95, 96, 102], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[94], Children { parents: (39, 59), siblings: vec![64, 74, 85, 92, 93, 95, 96, 103, 113, 123, 133, 142], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[95], Children { parents: (47, 59), siblings: vec![75, 86, 92, 93, 94, 96, 104, 114], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[96], Children { parents: (56, 59), siblings: vec![92, 93, 94, 95, 105, 115, 124], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[97], Children { parents: (42, 62), siblings: vec![69, 79, 88, 98, 108], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[98], Children { parents: (26, 62), siblings: vec![41, 50, 60, 70, 80, 89, 97, 109, 119], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[99], Children { parents: (37, 63), siblings: vec![62, 71, 82, 91, 100, 101, 102, 103, 104, 105, 106, 110], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8] });
    assert_eq!(children[100], Children { parents: (58, 63), siblings: vec![99, 101, 102, 103, 104, 105, 106, 111], value: 0, possible_values: vec![2] });
    assert_eq!(children[101], Children { parents: (45, 63), siblings: vec![73, 84, 92, 99, 100, 102, 103, 104, 105, 106, 112, 121], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[102], Children { parents: (54, 63), siblings: vec![93, 99, 100, 101, 103, 104, 105, 106], value: 0, possible_values: vec![3] });
    assert_eq!(children[103], Children { parents: (39, 63), siblings: vec![64, 74, 85, 94, 99, 100, 101, 102, 104, 105, 106, 113, 123, 133, 142], value: 0, possible_values: vec![2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[104], Children { parents: (47, 63), siblings: vec![75, 86, 95, 99, 100, 101, 102, 103, 105, 106, 114], value: 0, possible_values: vec![2, 3, 4, 6] });
    assert_eq!(children[105], Children { parents: (56, 63), siblings: vec![96, 99, 100, 101, 102, 103, 104, 106, 115, 124], value: 0, possible_values: vec![2, 3, 5] });
    assert_eq!(children[106], Children { parents: (60, 63), siblings: vec![99, 100, 101, 102, 103, 104, 105, 116, 125], value: 0, possible_values: vec![2, 4] });
    assert_eq!(children[107], Children { parents: (61, 65), siblings: vec![108, 109, 118, 127, 135, 146, 156, 166], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[108], Children { parents: (42, 65), siblings: vec![69, 79, 88, 97, 107, 109], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[109], Children { parents: (26, 65), siblings: vec![41, 50, 60, 70, 80, 89, 98, 107, 108, 119], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[110], Children { parents: (37, 67), siblings: vec![62, 71, 82, 91, 99, 111, 112], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[111], Children { parents: (58, 67), siblings: vec![100, 110, 112], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[112], Children { parents: (45, 67), siblings: vec![73, 84, 92, 101, 110, 111, 121], value: 0, possible_values: vec![3, 5, 6] });
    assert_eq!(children[113], Children { parents: (39, 69), siblings: vec![64, 74, 85, 94, 103, 114, 115, 116, 123, 133, 142], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[114], Children { parents: (47, 69), siblings: vec![75, 86, 95, 104, 113, 115, 116], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[115], Children { parents: (56, 69), siblings: vec![96, 105, 113, 114, 116, 124], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[116], Children { parents: (60, 69), siblings: vec![106, 113, 114, 115, 125], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[117], Children { parents: (64, 70), siblings: vec![118, 126], value: 0, possible_values: vec![1] });
    assert_eq!(children[118], Children { parents: (61, 70), siblings: vec![107, 117, 127, 135, 146, 156, 166], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[119], Children { parents: (26, 72), siblings: vec![41, 50, 60, 70, 80, 89, 98, 109, 120], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[120], Children { parents: (66, 72), siblings: vec![119, 129], value: 0, possible_values: vec![9] });
    assert_eq!(children[121], Children { parents: (45, 75), siblings: vec![73, 84, 92, 101, 112, 122, 123], value: 0, possible_values: vec![3, 5, 6, 7, 8, 9] });
    assert_eq!(children[122], Children { parents: (68, 75), siblings: vec![121, 123, 132, 141, 152], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[123], Children { parents: (39, 75), siblings: vec![64, 74, 85, 94, 103, 113, 121, 122, 133, 142], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7, 8, 9] });
    assert_eq!(children[124], Children { parents: (56, 77), siblings: vec![96, 105, 115, 125], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[125], Children { parents: (60, 77), siblings: vec![106, 116, 124], value: 0, possible_values: vec![1] });
    assert_eq!(children[126], Children { parents: (64, 78), siblings: vec![117, 127, 128], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[127], Children { parents: (61, 78), siblings: vec![107, 118, 126, 128, 135, 146, 156, 166], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[128], Children { parents: (71, 78), siblings: vec![126, 127, 136], value: 0, possible_values: vec![4, 5] });
    assert_eq!(children[129], Children { parents: (66, 80), siblings: vec![120, 130, 131], value: 0, possible_values: vec![7] });
    assert_eq!(children[130], Children { parents: (73, 80), siblings: vec![129, 131, 138, 149, 159], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[131], Children { parents: (74, 80), siblings: vec![129, 130, 139, 150, 160, 170], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[132], Children { parents: (68, 82), siblings: vec![122, 133, 134, 141, 152], value: 0, possible_values: vec![6] });
    assert_eq!(children[133], Children { parents: (39, 82), siblings: vec![64, 74, 85, 94, 103, 113, 123, 132, 134, 142], value: 0, possible_values: vec![6, 8, 9] });
    assert_eq!(children[134], Children { parents: (76, 82), siblings: vec![132, 133, 143], value: 0, possible_values: vec![9] });
    assert_eq!(children[135], Children { parents: (61, 85), siblings: vec![107, 118, 127, 136, 137, 146, 156, 166], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[136], Children { parents: (71, 85), siblings: vec![128, 135, 137], value: 0, possible_values: vec![7, 8, 9] });
    assert_eq!(children[137], Children { parents: (79, 85), siblings: vec![135, 136, 147], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[138], Children { parents: (73, 87), siblings: vec![130, 139, 140, 141, 142, 143, 144, 149, 159], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[139], Children { parents: (74, 87), siblings: vec![131, 138, 140, 141, 142, 143, 144, 150, 160, 170], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[140], Children { parents: (81, 87), siblings: vec![138, 139, 141, 142, 143, 144, 151], value: 0, possible_values: vec![3, 4, 5, 7] });
    assert_eq!(children[141], Children { parents: (68, 87), siblings: vec![122, 132, 138, 139, 140, 142, 143, 144, 152], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[142], Children { parents: (39, 87), siblings: vec![64, 74, 85, 94, 103, 113, 123, 133, 138, 139, 140, 141, 143, 144], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[143], Children { parents: (76, 87), siblings: vec![134, 138, 139, 140, 141, 142, 144], value: 0, possible_values: vec![7] });
    assert_eq!(children[144], Children { parents: (83, 87), siblings: vec![138, 139, 140, 141, 142, 143, 153, 163, 175, 183], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[145], Children { parents: (84, 89), siblings: vec![146, 155, 165], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[146], Children { parents: (61, 89), siblings: vec![107, 118, 127, 135, 145, 156, 166], value: 0, possible_values: vec![8, 9] });
    assert_eq!(children[147], Children { parents: (79, 91), siblings: vec![137, 148, 149, 150, 151, 152], value: 0, possible_values: vec![7, 9] });
    assert_eq!(children[148], Children { parents: (86, 91), siblings: vec![147, 149, 150, 151, 152, 158, 169, 179], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[149], Children { parents: (73, 91), siblings: vec![130, 138, 147, 148, 150, 151, 152, 159], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[150], Children { parents: (74, 91), siblings: vec![131, 139, 147, 148, 149, 151, 152, 160, 170], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[151], Children { parents: (81, 91), siblings: vec![140, 147, 148, 149, 150, 152], value: 0, possible_values: vec![3, 4, 5, 7, 8, 9] });
    assert_eq!(children[152], Children { parents: (68, 91), siblings: vec![122, 132, 141, 147, 148, 149, 150, 151], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[153], Children { parents: (83, 94), siblings: vec![144, 154, 163, 175, 183], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[154], Children { parents: (88, 94), siblings: vec![153, 164, 176], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[155], Children { parents: (84, 95), siblings: vec![145, 156, 157, 165], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[156], Children { parents: (61, 95), siblings: vec![107, 118, 127, 135, 146, 155, 157, 166], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[157], Children { parents: (90, 95), siblings: vec![155, 156, 167, 177], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[158], Children { parents: (86, 97), siblings: vec![148, 159, 160, 169, 179], value: 0, possible_values: vec![1, 2] });
    assert_eq!(children[159], Children { parents: (73, 97), siblings: vec![130, 138, 149, 158, 160], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[160], Children { parents: (74, 97), siblings: vec![131, 139, 150, 158, 159, 170], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[161], Children { parents: (92, 100), siblings: vec![162, 163, 164, 173], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[162], Children { parents: (93, 100), siblings: vec![161, 163, 164, 174, 182], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[163], Children { parents: (83, 100), siblings: vec![144, 153, 161, 162, 164, 175, 183], value: 0, possible_values: vec![1, 2, 3, 4] });
    assert_eq!(children[164], Children { parents: (88, 100), siblings: vec![154, 161, 162, 163, 176], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[165], Children { parents: (84, 101), siblings: vec![145, 155, 166, 167, 168, 169], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[166], Children { parents: (61, 101), siblings: vec![107, 118, 127, 135, 146, 156, 165, 167, 168, 169], value: 0, possible_values: vec![1, 2, 3, 4, 6] });
    assert_eq!(children[167], Children { parents: (90, 101), siblings: vec![157, 165, 166, 168, 169, 177], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[168], Children { parents: (96, 101), siblings: vec![165, 166, 167, 169, 178], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[169], Children { parents: (86, 101), siblings: vec![148, 158, 165, 166, 167, 168, 179], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[170], Children { parents: (74, 102), siblings: vec![131, 139, 150, 160, 171, 172, 173, 174, 175, 176], value: 0, possible_values: vec![1, 2, 3, 4, 5] });
    assert_eq!(children[171], Children { parents: (98, 102), siblings: vec![170, 172, 173, 174, 175, 176, 180], value: 0, possible_values: vec![7] });
    assert_eq!(children[172], Children { parents: (99, 102), siblings: vec![170, 171, 173, 174, 175, 176, 181], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[173], Children { parents: (92, 102), siblings: vec![161, 170, 171, 172, 174, 175, 176], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[174], Children { parents: (93, 102), siblings: vec![162, 170, 171, 172, 173, 175, 176, 182], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6] });
    assert_eq!(children[175], Children { parents: (83, 102), siblings: vec![144, 153, 163, 170, 171, 172, 173, 174, 176, 183], value: 0, possible_values: vec![1, 2, 3, 4, 5, 6, 7] });
    assert_eq!(children[176], Children { parents: (88, 102), siblings: vec![154, 164, 170, 171, 172, 173, 174, 175], value: 0, possible_values: vec![1, 2, 3] });
    assert_eq!(children[177], Children { parents: (90, 103), siblings: vec![157, 167, 178, 179], value: 0, possible_values: vec![1, 2, 4] });
    assert_eq!(children[178], Children { parents: (96, 103), siblings: vec![168, 177, 179], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[179], Children { parents: (86, 103), siblings: vec![148, 158, 169, 177, 178], value: 0, possible_values: vec![1, 2, 3, 5] });
    assert_eq!(children[180], Children { parents: (98, 104), siblings: vec![171, 181], value: 0, possible_values: vec![9] });
    assert_eq!(children[181], Children { parents: (99, 104), siblings: vec![172, 180], value: 0, possible_values: vec![8] });
    assert_eq!(children[182], Children { parents: (93, 105), siblings: vec![162, 174, 183], value: 0, possible_values: vec![1, 3] });
    assert_eq!(children[183], Children { parents: (83, 105), siblings: vec![144, 153, 163, 175, 182], value: 0, possible_values: vec![1, 3] });
  }
}