#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn test_puzzle_setup_with_input_file_1() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "D:\\Code\\Kakuro_input.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    assert_eq!(parents_and_children.0.len(), 48);
    assert_eq!(parents_and_children.1.len(), 72);

    assert_eq!(parents_and_children.0[0], Parents { children: vec![0, 7, 15], sum: 11, value_size: "11-3".to_string(), combinations: vec![vec![1, 2, 8], vec![1, 3, 7], vec![1, 4, 6], vec![2, 3, 6], vec![2, 4, 5]] });
    assert_eq!(parents_and_children.0[1], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[2], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[3], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[4], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[5], Parents { children: vec![], sum: 20, value_size: "20-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[6], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[7], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[8], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[9], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[10], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[11], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[12], Parents { children: vec![], sum: 27, value_size: "27-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[13], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[14], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[15], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[16], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[17], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[18], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[19], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[20], Parents { children: vec![], sum: 18, value_size: "18-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[21], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[22], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[23], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[24], Parents { children: vec![], sum: 21, value_size: "21-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[25], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[26], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[27], Parents { children: vec![], sum: 34, value_size: "34-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[28], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[29], Parents { children: vec![], sum: 5, value_size: "5-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[30], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[31], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[32], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[33], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[34], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[35], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[36], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[37], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[38], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[39], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[40], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[41], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[42], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[43], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[44], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[45], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[46], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[47], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });

    assert_eq!(parents_and_children.1[0], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[1], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[2], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[3], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[4], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[5], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[6], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[7], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[8], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[9], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[10], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[11], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[12], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[13], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[14], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[15], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[16], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[17], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[18], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[19], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[20], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[21], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[22], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[23], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[24], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[25], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[26], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[27], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[28], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[29], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[30], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[31], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[32], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[33], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[34], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[35], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[36], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[37], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[38], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[39], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[40], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[41], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[42], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[43], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[44], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[45], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[46], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[47], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[48], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[49], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[50], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[51], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[52], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[53], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[54], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[55], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[56], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[57], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[58], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[59], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[60], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[61], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[62], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[63], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[64], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[65], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[66], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[67], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[68], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[69], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[70], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[71], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_2() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "D:\\Code\\Kakuro_input2.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    assert_eq!(parents_and_children.0.len(), 66);
    assert_eq!(parents_and_children.1.len(), 97);

    assert_eq!(parents_and_children.0[0], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[1], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[2], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[3], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[4], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[5], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[6], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[7], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[8], Parents { children: vec![], sum: 5, value_size: "5-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[9], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[10], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[11], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[12], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[13], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[14], Parents { children: vec![], sum: 22, value_size: "22-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[15], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[16], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[17], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[18], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[19], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[20], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[21], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[22], Parents { children: vec![], sum: 34, value_size: "34-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[23], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[24], Parents { children: vec![], sum: 31, value_size: "31-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[25], Parents { children: vec![], sum: 18, value_size: "18-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[26], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[27], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[28], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[29], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[30], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[31], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[32], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[33], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[34], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[35], Parents { children: vec![], sum: 39, value_size: "39-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[36], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[37], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[38], Parents { children: vec![], sum: 35, value_size: "35-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[39], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[40], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[41], Parents { children: vec![], sum: 34, value_size: "34-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[42], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[43], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[44], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[45], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[46], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[47], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[48], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[49], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[50], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[51], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[52], Parents { children: vec![], sum: 18, value_size: "18-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[53], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[54], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[55], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[56], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[57], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[58], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[59], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[60], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[61], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[62], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[63], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[64], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[65], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });

    assert_eq!(parents_and_children.1[0], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[1], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[2], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[3], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[4], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[5], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[6], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[7], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[8], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[9], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[10], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[11], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[12], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[13], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[14], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[15], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[16], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[17], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[18], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[19], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[20], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[21], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[22], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[23], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[24], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[25], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[26], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[27], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[28], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[29], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[30], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[31], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[32], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[33], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[34], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[35], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[36], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[37], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[38], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[39], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[40], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[41], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[42], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[43], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[44], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[45], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[46], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[47], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[48], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[49], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[50], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[51], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[52], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[53], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[54], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[55], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[56], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[57], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[58], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[59], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[60], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[61], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[62], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[63], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[64], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[65], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[66], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[67], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[68], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[69], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[70], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[71], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[72], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[73], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[74], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[75], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[76], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[77], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[78], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[79], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[80], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[81], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[82], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[83], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[84], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[85], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[86], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[87], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[88], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[89], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[90], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[91], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[92], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[93], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[94], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[95], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[96], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_3() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "D:\\Code\\Kakuro_input3.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    assert_eq!(parents_and_children.0.len(), 56);
    assert_eq!(parents_and_children.1.len(), 112);

    assert_eq!(parents_and_children.0[0], Parents { children: vec![], sum: 38, value_size: "38-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[1], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[2], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[3], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[4], Parents { children: vec![], sum: 27, value_size: "27-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[5], Parents { children: vec![], sum: 22, value_size: "22-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[6], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[7], Parents { children: vec![], sum: 37, value_size: "37-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[8], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[9], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[10], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[11], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[12], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[13], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[14], Parents { children: vec![], sum: 35, value_size: "35-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[15], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[16], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[17], Parents { children: vec![], sum: 34, value_size: "34-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[18], Parents { children: vec![], sum: 41, value_size: "41-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[19], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[20], Parents { children: vec![], sum: 22, value_size: "22-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[21], Parents { children: vec![], sum: 34, value_size: "34-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[22], Parents { children: vec![], sum: 18, value_size: "18-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[23], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[24], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[25], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[26], Parents { children: vec![], sum: 20, value_size: "20-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[27], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[28], Parents { children: vec![], sum: 19, value_size: "19-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[29], Parents { children: vec![], sum: 38, value_size: "38-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[30], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[31], Parents { children: vec![], sum: 21, value_size: "21-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[32], Parents { children: vec![], sum: 38, value_size: "38-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[33], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[34], Parents { children: vec![], sum: 21, value_size: "21-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[35], Parents { children: vec![], sum: 25, value_size: "25-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[36], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[37], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[38], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[39], Parents { children: vec![], sum: 25, value_size: "25-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[40], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[41], Parents { children: vec![], sum: 34, value_size: "34-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[42], Parents { children: vec![], sum: 22, value_size: "22-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[43], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[44], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[45], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[46], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[47], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[48], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[49], Parents { children: vec![], sum: 18, value_size: "18-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[50], Parents { children: vec![], sum: 5, value_size: "5-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[51], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[52], Parents { children: vec![], sum: 35, value_size: "35-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[53], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[54], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[55], Parents { children: vec![], sum: 18, value_size: "18-".to_string(), combinations: vec![] });

    assert_eq!(parents_and_children.1[0], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[1], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[2], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[3], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[4], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[5], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[6], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[7], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[8], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[9], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[10], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[11], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[12], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[13], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[14], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[15], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[16], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[17], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[18], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[19], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[20], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[21], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[22], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[23], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[24], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[25], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[26], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[27], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[28], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[29], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[30], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[31], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[32], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[33], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[34], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[35], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[36], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[37], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[38], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[39], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[40], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[41], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[42], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[43], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[44], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[45], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[46], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[47], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[48], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[49], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[50], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[51], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[52], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[53], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[54], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[55], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[56], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[57], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[58], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[59], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[60], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[61], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[62], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[63], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[64], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[65], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[66], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[67], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[68], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[69], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[70], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[71], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[72], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[73], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[74], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[75], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[76], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[77], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[78], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[79], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[80], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[81], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[82], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[83], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[84], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[85], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[86], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[87], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[88], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[89], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[90], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[91], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[92], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[93], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[94], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[95], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[96], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[97], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[98], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[99], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[100], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[101], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[102], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[103], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[104], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[105], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[106], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[107], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[108], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[109], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[110], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[111], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_4() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "D:\\Code\\Kakuro_input4.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    assert_eq!(parents_and_children.0.len(), 68);
    assert_eq!(parents_and_children.1.len(), 121);

    assert_eq!(parents_and_children.0[0], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[1], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[2], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[3], Parents { children: vec![], sum: 21, value_size: "21-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[4], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[5], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[6], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[7], Parents { children: vec![], sum: 19, value_size: "19-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[8], Parents { children: vec![], sum: 22, value_size: "22-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[9], Parents { children: vec![], sum: 20, value_size: "20-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[10], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[11], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[12], Parents { children: vec![], sum: 18, value_size: "18-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[13], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[14], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[15], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[16], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[17], Parents { children: vec![], sum: 38, value_size: "38-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[18], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[19], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[20], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[21], Parents { children: vec![], sum: 39, value_size: "39-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[22], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[23], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[24], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[25], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[26], Parents { children: vec![], sum: 28, value_size: "28-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[27], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[28], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[29], Parents { children: vec![], sum: 14, value_size: "14-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[30], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[31], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[32], Parents { children: vec![], sum: 5, value_size: "5-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[33], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[34], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[35], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[36], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[37], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[38], Parents { children: vec![], sum: 41, value_size: "41-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[39], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[40], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[41], Parents { children: vec![], sum: 5, value_size: "5-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[42], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[43], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[44], Parents { children: vec![], sum: 22, value_size: "22-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[45], Parents { children: vec![], sum: 21, value_size: "21-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[46], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[47], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[48], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[49], Parents { children: vec![], sum: 19, value_size: "19-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[50], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[51], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[52], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[53], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[54], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[55], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[56], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[57], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[58], Parents { children: vec![], sum: 22, value_size: "22-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[59], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[60], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[61], Parents { children: vec![], sum: 36, value_size: "36-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[62], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[63], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[64], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[65], Parents { children: vec![], sum: 27, value_size: "27-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[66], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[67], Parents { children: vec![], sum: 19, value_size: "19-".to_string(), combinations: vec![] });

    assert_eq!(parents_and_children.1[0], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[1], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[2], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[3], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[4], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[5], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[6], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[7], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[8], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[9], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[10], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[11], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[12], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[13], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[14], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[15], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[16], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[17], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[18], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[19], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[20], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[21], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[22], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[23], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[24], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[25], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[26], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[27], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[28], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[29], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[30], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[31], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[32], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[33], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[34], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[35], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[36], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[37], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[38], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[39], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[40], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[41], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[42], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[43], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[44], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[45], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[46], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[47], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[48], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[49], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[50], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[51], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[52], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[53], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[54], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[55], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[56], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[57], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[58], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[59], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[60], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[61], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[62], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[63], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[64], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[65], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[66], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[67], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[68], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[69], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[70], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[71], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[72], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[73], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[74], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[75], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[76], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[77], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[78], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[79], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[80], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[81], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[82], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[83], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[84], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[85], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[86], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[87], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[88], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[89], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[90], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[91], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[92], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[93], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[94], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[95], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[96], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[97], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[98], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[99], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[100], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[101], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[102], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[103], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[104], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[105], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[106], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[107], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[108], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[109], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[110], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[111], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[112], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[113], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[114], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[115], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[116], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[117], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[118], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[119], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[120], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
  }

  #[test]
  fn test_puzzle_setup_with_input_file_5() {
    let mut parents_and_children: (Vec<Parents>, Vec<Children>) = (Vec::new(), Vec::new());
    let puzzle_file = "D:\\Code\\Kakuro_input5.txt".to_string();

    puzzle_setup(&mut parents_and_children, puzzle_file);

    assert_eq!(parents_and_children.0.len(), 106);
    assert_eq!(parents_and_children.1.len(), 184);

    assert_eq!(parents_and_children.0[0], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[1], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[2], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[3], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[4], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[5], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[6], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[7], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[8], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[9], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[10], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[11], Parents { children: vec![], sum: 25, value_size: "25-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[12], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[13], Parents { children: vec![], sum: 28, value_size: "28-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[14], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[15], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[16], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[17], Parents { children: vec![], sum: 34, value_size: "34-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[18], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[19], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[20], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[21], Parents { children: vec![], sum: 19, value_size: "19-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[22], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[23], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[24], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[25], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[26], Parents { children: vec![], sum: 45, value_size: "45-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[27], Parents { children: vec![], sum: 21, value_size: "21-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[28], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[29], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[30], Parents { children: vec![], sum: 42, value_size: "42-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[31], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[32], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[33], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[34], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[35], Parents { children: vec![], sum: 29, value_size: "29-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[36], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[37], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[38], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[39], Parents { children: vec![], sum: 45, value_size: "45-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[40], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[41], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[42], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[43], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[44], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[45], Parents { children: vec![], sum: 38, value_size: "38-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[46], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[47], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[48], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[49], Parents { children: vec![], sum: 30, value_size: "30-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[50], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[51], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[52], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[53], Parents { children: vec![], sum: 36, value_size: "36-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[54], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[55], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[56], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[57], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[58], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[59], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[60], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[61], Parents { children: vec![], sum: 32, value_size: "32-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[62], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[63], Parents { children: vec![], sum: 44, value_size: "44-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[64], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[65], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[66], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[67], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[68], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[69], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[70], Parents { children: vec![], sum: 3, value_size: "3-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[71], Parents { children: vec![], sum: 13, value_size: "13-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[72], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[73], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[74], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[75], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[76], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[77], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[78], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[79], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[80], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[81], Parents { children: vec![], sum: 12, value_size: "12-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[82], Parents { children: vec![], sum: 23, value_size: "23-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[83], Parents { children: vec![], sum: 20, value_size: "20-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[84], Parents { children: vec![], sum: 15, value_size: "15-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[85], Parents { children: vec![], sum: 24, value_size: "24-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[86], Parents { children: vec![], sum: 11, value_size: "11-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[87], Parents { children: vec![], sum: 28, value_size: "28-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[88], Parents { children: vec![], sum: 6, value_size: "6-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[89], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[90], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[91], Parents { children: vec![], sum: 28, value_size: "28-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[92], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[93], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[94], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[95], Parents { children: vec![], sum: 8, value_size: "8-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[96], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[97], Parents { children: vec![], sum: 7, value_size: "7-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[98], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[99], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[100], Parents { children: vec![], sum: 10, value_size: "10-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[101], Parents { children: vec![], sum: 16, value_size: "16-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[102], Parents { children: vec![], sum: 28, value_size: "28-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[103], Parents { children: vec![], sum: 9, value_size: "9-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[104], Parents { children: vec![], sum: 17, value_size: "17-".to_string(), combinations: vec![] });
    assert_eq!(parents_and_children.0[105], Parents { children: vec![], sum: 4, value_size: "4-".to_string(), combinations: vec![] });

    assert_eq!(parents_and_children.1[0], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[1], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[2], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[3], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[4], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[5], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[6], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[7], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[8], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[9], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[10], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[11], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[12], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[13], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[14], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[15], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[16], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[17], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[18], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[19], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[20], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[21], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[22], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[23], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[24], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[25], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[26], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[27], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[28], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[29], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[30], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[31], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[32], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[33], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[34], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[35], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[36], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[37], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[38], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[39], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[40], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[41], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[42], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[43], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[44], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[45], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[46], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[47], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[48], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[49], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[50], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[51], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[52], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[53], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[54], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[55], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[56], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[57], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[58], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[59], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[60], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[61], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[62], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[63], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[64], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[65], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[66], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[67], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[68], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[69], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[70], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[71], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[72], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[73], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[74], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[75], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[76], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[77], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[78], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[79], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[80], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[81], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[82], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[83], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[84], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[85], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[86], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[87], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[88], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[89], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[90], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[91], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[92], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[93], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[94], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[95], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[96], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[97], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[98], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[99], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[100], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[101], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[102], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[103], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[104], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[105], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[106], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[107], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[108], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[109], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[110], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[111], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[112], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[113], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[114], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[115], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[116], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[117], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[118], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[119], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[120], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[121], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[122], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[123], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[124], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[125], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[126], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[127], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[128], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[129], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[130], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[131], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[132], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[133], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[134], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[135], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[136], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[137], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[138], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[139], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[140], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[141], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[142], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[143], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[144], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[145], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[146], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[147], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[148], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[149], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[150], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[151], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[152], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[153], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[154], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[155], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[156], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[157], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[158], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[159], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[160], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[161], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[162], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[163], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[164], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[165], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[166], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[167], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[168], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[169], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[170], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[171], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[172], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[173], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[174], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[175], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[176], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[177], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[178], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[179], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[180], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[181], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[182], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
    assert_eq!(parents_and_children.1[183], Children { parents: (), siblings: vec![], value: 0, possible_values: vec![] });
  }
}